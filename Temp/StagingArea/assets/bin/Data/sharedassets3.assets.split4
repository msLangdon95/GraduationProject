tion 774
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 775
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 776
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 777
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 778
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 779
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 780
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 781
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 782
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 783
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 784
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 785
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 786
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 787
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 788
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 789
    //MOV
    t1.w = t0.x;
    //Instruction 790
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 791
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 792
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 793
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 794
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 795
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 796
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 797
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 798
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 799
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 800
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 801
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 802
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 803
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 804
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 805
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 806
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 807
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 808
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 809
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 810
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 811
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 812
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 813
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 814
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 815
    //MOV
    t2.w = t0.z;
    //Instruction 816
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 817
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 818
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 819
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 820
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 821
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 822
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 823
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 824
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 825
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 826
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 827
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 828
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 829
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 830
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 831
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 726
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 727
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 728
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 729
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 730
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 731
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 732
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 733
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 734
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 735
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 736
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 737
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 738
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 739
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 740
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 741
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 742
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 743
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 744
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 745
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 746
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 747
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 748
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 749
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 750
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 751
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 752
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 753
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 754
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 755
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 756
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 757
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 758
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 759
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 760
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 761
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 762
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 763
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 764
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 765
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 766
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 767
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 768
    //SAMPLE
    t10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 769
    //MUL
    t16_1.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 770
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 771
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 772
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 773
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 861
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 862
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 863
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 864
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 865
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 866
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 867
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 868
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 869
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 870
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 871
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 872
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 873
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 874
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 875
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 876
    //MOV
    t1.w = t0.x;
    //Instruction 877
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 878
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 879
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 880
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 881
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 882
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 883
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 884
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 885
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 886
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 887
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 888
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 889
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 890
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 891
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 892
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 893
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 894
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 895
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 896
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 897
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 898
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 899
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 900
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 901
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 902
    //MOV
    t2.w = t0.z;
    //Instruction 903
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 904
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 905
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 906
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 907
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 908
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 909
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 910
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 911
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 912
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 913
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 914
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 915
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 916
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 917
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 918
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 919
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 920
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 921
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 922
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 923
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 924
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 925
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 926
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 927
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 928
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 929
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 930
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 931
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 932
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 933
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 934
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump float t16_8;
bool tb8;
mediump float t16_10;
mediump float t16_15;
mediump float t16_21;
mediump float t16_24;
mediump float t16_25;
void main()
{
    //Instruction 796
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 797
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 798
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 799
    //LT
    tb8 = 0.0<vs_TEXCOORD5.z;
    //Instruction 800
    //MOVC
    t10_2 = (tb8) ? 1.0 : 0.0;
    //Instruction 801
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 802
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 803
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 804
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 805
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 806
    //SAMPLE_C_LZ
    vec3 txVec2 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    //Instruction 807
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 808
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 809
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 810
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 811
    //DP3
    t16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 812
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 813
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 814
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 815
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 816
    //DP3
    t16_24 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 817
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 818
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 819
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_21) + t16_3.xyz;
    //Instruction 820
    //DP3
    t16_21 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 821
    //MAX
    t16_1.x = max(t16_21, 0.001000);
    //Instruction 822
    //RSQ
    t16_21 = inversesqrt(t16_1.x);
    //Instruction 823
    //MUL
    t16_4.xyz = vec3(t16_21) * t16_4.xyz;
    //Instruction 824
    //DP3
    t16_21 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 825
    //MAX
    t16_1.x = max(t16_21, 0.0);
    //Instruction 826
    //MUL
    t16_21 = t16_1.x * t16_1.x;
    //Instruction 827
    //ADD
    t16_24 = (-_Glossiness) + 1.0;
    //Instruction 828
    //MUL
    t16_25 = t16_24 * t16_24;
    //Instruction 829
    //ADD
    t16_24 = (-t16_24) + 1.0;
    //Instruction 830
    //MAD
    t16_24 = t16_24 * 0.968000 + 0.030000;
    //Instruction 831
    //LOG
    t16_24 = log2(t16_24);
    //Instruction 832
    //DIV
    t16_24 = 10.000000 / t16_24;
    //Instruction 833
    //MAD
    t16_21 = t16_21 * _Glossiness + t16_25;
    //Instruction 834
    //MUL
    t16_21 = t16_21 * unity_LightGammaCorrectionConsts.z;
    //Instruction 835
    //MAD
    t16_1.x = t16_21 * t16_1.x + 0.000100;
    //Instruction 836
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 837
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 838
    //MUL
    t16_5.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 839
    //DP3
    t16_21 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 840
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 841
    //MAX
    t16_8 = max(t16_3.x, 0.0);
    //Instruction 842
    //MAX
    t16_15 = max(t16_21, 0.0);
    //Instruction 843
    //LOG
    t16_21 = log2(t16_15);
    //Instruction 844
    //MUL
    t16_3.x = t16_24 * t16_24;
    //Instruction 845
    //MAD
    t16_10 = t16_24 * t16_24 + 1.0;
    //Instruction 846
    //MUL
    t16_21 = t16_21 * t16_3.x;
    //Instruction 847
    //EXP
    t16_21 = exp2(t16_21);
    //Instruction 848
    //MUL
    t16_21 = t16_21 * t16_10;
    //Instruction 849
    //DIV
    t16_1.x = t16_21 / t16_1.x;
    //Instruction 850
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 851
    //MAD
    t16_3.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 852
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 853
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 854
    //MUL
    t16_3.xyz = t16_1.xxx * t16_3.xyz;
    //Instruction 855
    //MAD
    t16_21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 856
    //MAD
    t16_3.xyz = t16_6.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 857
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 858
    //MUL
    SV_Target0.xyz = vec3(t16_8) * t16_0.xyz;
    //Instruction 859
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 860
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 893
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 894
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 895
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 896
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 897
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 898
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 899
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 900
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 901
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 902
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 903
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 904
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 905
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 906
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 907
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 908
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 909
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 910
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 911
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 912
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 913
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 914
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 915
    //MOV
    t1.w = t2.x;
    //Instruction 916
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 917
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 918
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 919
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 920
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 921
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 922
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 923
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 924
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 925
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 926
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 927
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 928
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 929
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 930
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 931
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 932
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 933
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 934
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 935
    //MOV
    t0.w = t2.z;
    //Instruction 936
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 937
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 938
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 939
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 940
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 941
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 942
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 943
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 944
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 945
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 946
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 947
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 948
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 949
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 950
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 951
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 952
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 953
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 954
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 955
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 956
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump vec3 t16_1;
highp float t2;
mediump float t16_2;
lowp float t10_2;
bool tb2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
highp float t12;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 832
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 833
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 834
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 835
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 836
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 837
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 838
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 839
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 840
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 841
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 842
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 843
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 844
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 845
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 846
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 847
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 848
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 849
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 850
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 851
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 852
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 853
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 854
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 855
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 856
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 857
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 858
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 859
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 860
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 861
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 862
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 863
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 864
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 865
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 866
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 867
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 868
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 869
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 870
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 871
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 872
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 873
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 874
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 875
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 876
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 877
    //DP3
    t2 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 878
    //SQRT
    t2 = sqrt(t2);
    //Instruction 879
    //MUL
    t2 = t2 * _LightPositionRange.w;
    //Instruction 880
    //MUL
    t2 = t2 * 0.970000;
    //Instruction 881
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 882
    //DP4
    t12 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 883
    //LT
    tb2 = t12<t2;
    //Instruction 884
    //MOVC
    t16_15 = (tb2) ? _LightShadowData.x : 1.0;
    //Instruction 885
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 886
    //SAMPLE
    t10_2 = texture(_LightTexture0, vec2(t2)).w;
    //Instruction 887
    //MUL
    t16_2 = t16_15 * t10_2;
    //Instruction 888
    //MUL
    t16_3.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 889
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 890
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 891
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 892
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 999
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1000
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1001
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1002
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1003
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1004
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1005
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1006
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1007
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1008
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1009
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1010
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1011
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1012
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1013
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1014
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1015
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1016
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1017
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1018
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1019
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1020
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1021
    //MOV
    t1.w = t2.x;
    //Instruction 1022
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1023
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1024
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1025
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1026
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1027
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1028
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1029
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1030
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1031
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1032
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1033
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1034
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1035
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1036
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1037
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1038
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1039
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1040
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1041
    //MOV
    t0.w = t2.z;
    //Instruction 1042
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1043
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1044
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1045
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1046
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1047
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1048
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1049
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1050
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1051
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1052
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1053
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1054
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1055
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1056
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1057
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1058
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1059
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1060
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1061
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1062
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_9;
mediump float t16_12;
mediump float t16_20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 935
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 936
    //SQRT
    t0 = sqrt(t0);
    //Instruction 937
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 938
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 939
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 940
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 941
    //LT
    tb0 = t6<t0;
    //Instruction 942
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 943
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 944
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 945
    //SAMPLE
    t10_6 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 946
    //MUL
    t16_0 = t10_6 * t10_0;
    //Instruction 947
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 948
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 949
    //DP3
    t16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 950
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 951
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 952
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 953
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 954
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 955
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 956
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 957
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_20) + t16_3.xyz;
    //Instruction 958
    //DP3
    t16_20 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 959
    //MAX
    t16_0 = max(t16_20, 0.001000);
    //Instruction 960
    //RSQ
    t16_20 = inversesqrt(t16_0);
    //Instruction 961
    //MUL
    t16_4.xyz = vec3(t16_20) * t16_4.xyz;
    //Instruction 962
    //DP3
    t16_20 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 963
    //MAX
    t16_0 = max(t16_20, 0.0);
    //Instruction 964
    //MUL
    t16_20 = t16_0 * t16_0;
    //Instruction 965
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 966
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 967
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 968
    //MAD
    t16_21 = t16_21 * 0.968000 + 0.030000;
    //Instruction 969
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 970
    //DIV
    t16_21 = 10.000000 / t16_21;
    //Instruction 971
    //MAD
    t16_20 = t16_20 * _Glossiness + t16_22;
    //Instruction 972
    //MUL
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    //Instruction 973
    //MAD
    t16_0 = t16_20 * t16_0 + 0.000100;
    //Instruction 974
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 975
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 976
    //MUL
    t16_5.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 977
    //DP3
    t16_20 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 978
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 979
    //MAX
    t16_6 = max(t16_3.x, 0.0);
    //Instruction 980
    //MAX
    t16_12 = max(t16_20, 0.0);
    //Instruction 981
    //LOG
    t16_20 = log2(t16_12);
    //Instruction 982
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 983
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 984
    //MUL
    t16_20 = t16_20 * t16_3.x;
    //Instruction 985
    //EXP
    t16_20 = exp2(t16_20);
    //Instruction 986
    //MUL
    t16_20 = t16_20 * t16_9;
    //Instruction 987
    //DIV
    t16_0 = t16_20 / t16_0;
    //Instruction 988
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 989
    //MAD
    t16_3.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 990
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 991
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 992
    //MUL
    t16_3.xyz = vec3(t16_0) * t16_3.xyz;
    //Instruction 993
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 994
    //MAD
    t16_3.xyz = t16_1.xyz * vec3(t16_20) + t16_3.xyz;
    //Instruction 995
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 996
    //MUL
    SV_Target0.xyz = vec3(t16_6) * t16_2.xyz;
    //Instruction 997
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 998
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1030
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1031
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1032
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1033
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1034
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1035
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1036
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1037
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1038
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1039
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1040
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1041
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1042
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1043
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1044
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1045
    //MOV
    t1.w = t0.x;
    //Instruction 1046
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1047
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1048
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1049
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1050
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1051
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1052
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1053
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1054
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1055
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1056
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1057
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1058
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1059
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1060
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1061
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1062
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1063
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1064
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1065
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1066
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1067
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1068
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1069
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1070
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1071
    //MOV
    t2.w = t0.z;
    //Instruction 1072
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1073
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1074
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1075
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1076
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1077
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1078
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1079
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1080
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1081
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 1082
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 1083
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 1084
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 1085
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 1086
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 1087
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 1088
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 1089
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 1090
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 1091
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 1092
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 1093
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 1094
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 1095
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 1096
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 1097
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1098
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 1099
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 1100
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 1101
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 1102
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 1103
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec3 t16_2;
lowp vec3 t10_2;
highp vec3 t3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 957
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 958
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 959
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 960
    //SAMPLE_C_LZ
    vec3 txVec2 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    //Instruction 961
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 962
    //SAMPLE_C_LZ
    vec3 txVec3 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    //Instruction 963
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 964
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 965
    //SAMPLE_C_LZ
    vec3 txVec4 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    //Instruction 966
    //SAMPLE_C_LZ
    vec3 txVec5 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    //Instruction 967
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 968
    //DP4
    t16_1.x = dot(t16_0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 969
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 970
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 971
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 972
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 973
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 974
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 975
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 976
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 977
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 978
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 979
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 980
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 981
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 982
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 983
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 984
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 985
    //DP3
    t16_29 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 986
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 987
    //MUL
    t16_5.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 988
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 989
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 990
    //MAX
    t16_1.x = max(t16_24, 0.001000);
    //Instruction 991
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 992
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 993
    //DP3
    t16_24 = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 994
    //MAX
    t16_1.x = max(t16_24, 0.0);
    //Instruction 995
    //MUL
    t16_24 = t16_1.x * t16_1.x;
    //Instruction 996
    //ADD
    t16_29 = (-_Glossiness) + 1.0;
    //Instruction 997
    //MUL
    t16_30 = t16_29 * t16_29;
    //Instruction 998
    //ADD
    t16_29 = (-t16_29) + 1.0;
    //Instruction 999
    //MAD
    t16_29 = t16_29 * 0.968000 + 0.030000;
    //Instruction 1000
    //LOG
    t16_29 = log2(t16_29);
    //Instruction 1001
    //DIV
    t16_29 = 10.000000 / t16_29;
    //Instruction 1002
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_30;
    //Instruction 1003
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1004
    //MAD
    t16_1.x = t16_24 * t16_1.x + 0.000100;
    //Instruction 1005
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1006
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1007
    //MUL
    t16_7.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1008
    //DP3
    t16_24 = dot(t16_7.xyz, t16_6.xyz);
    //Instruction 1009
    //DP3
    t16_5.x = dot(t16_7.xyz, t16_5.xyz);
    //Instruction 1010
    //MAX
    t16_9 = max(t16_5.x, 0.0);
    //Instruction 1011
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 1012
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 1013
    //MUL
    t16_5.x = t16_29 * t16_29;
    //Instruction 1014
    //MAD
    t16_13 = t16_29 * t16_29 + 1.0;
    //Instruction 1015
    //MUL
    t16_24 = t16_24 * t16_5.x;
    //Instruction 1016
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1017
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 1018
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 1019
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1020
    //MAD
    t16_5.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1021
    //MUL
    t16_2.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 1022
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1023
    //MUL
    t16_5.xyz = t16_1.xxx * t16_5.xyz;
    //Instruction 1024
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1025
    //MAD
    t16_5.xyz = t16_2.xyz * vec3(t16_24) + t16_5.xyz;
    //Instruction 1026
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 1027
    //MUL
    SV_Target0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 1028
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1029
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1136
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1137
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1138
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1139
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1140
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1141
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1142
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1143
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1144
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1145
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1146
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1147
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1148
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1149
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1150
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1151
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1152
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1153
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1154
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1155
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1156
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1157
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1158
    //MOV
    t1.w = t2.x;
    //Instruction 1159
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1160
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1161
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1162
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1163
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1164
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1165
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1166
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1167
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1168
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1169
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1170
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1171
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1172
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1173
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1174
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1175
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1176
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1177
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1178
    //MOV
    t0.w = t2.z;
    //Instruction 1179
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1180
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1181
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1182
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1183
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1184
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1185
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1186
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1187
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1188
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1189
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1190
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1191
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1192
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1193
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1194
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1195
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1196
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1197
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1198
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1199
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 1063
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1064
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1065
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 1066
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 1067
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, 0.007813, 0.007813);
    //Instruction 1068
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1069
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1070
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, -0.007813, 0.007813);
    //Instruction 1071
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1072
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1073
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, 0.007813, -0.007813);
    //Instruction 1074
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1075
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1076
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, -0.007813, -0.007813);
    //Instruction 1077
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1078
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1079
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 1080
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 1081
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1082
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1083
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xx).w;
    //Instruction 1084
    //MUL
    t16_0 = t16_3.x * t10_0;
    //Instruction 1085
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1086
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1087
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1088
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 1089
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 1090
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 1091
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1092
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 1093
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 1094
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 1095
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1096
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 1097
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 1098
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 1099
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 1100
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 1101
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 1102
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 1103
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 1104
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 1105
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 1106
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 1107
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 1108
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 1109
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1110
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 1111
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1112
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1113
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1114
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 1115
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 1116
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 1117
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 1118
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 1119
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 1120
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 1121
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 1122
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1123
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 1124
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 1125
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1126
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1127
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 1128
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1129
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 1130
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1131
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 1132
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 1133
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 1134
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1135
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1179
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1180
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1181
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1182
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1183
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1184
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1185
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1186
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1187
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1188
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1189
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1190
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1191
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1192
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1193
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1194
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1195
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1196
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1197
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1198
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1199
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1200
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1201
    //MOV
    t1.w = t2.x;
    //Instruction 1202
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1203
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1204
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1205
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1206
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1207
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1208
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1209
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1210
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1211
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1212
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1213
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1214
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1215
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1216
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1217
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1218
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1219
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1220
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1221
    //MOV
    t0.w = t2.z;
    //Instruction 1222
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1223
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1224
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1225
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1226
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1227
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1228
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1229
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1230
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1231
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1232
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1233
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1234
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1235
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1236
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1237
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1238
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1239
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1240
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1241
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1242
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec3 t16_1;
lowp vec3 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 1104
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1105
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1106
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 1107
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 1108
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, 0.007813, 0.007813);
    //Instruction 1109
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1110
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1111
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, -0.007813, 0.007813);
    //Instruction 1112
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1113
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1114
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, 0.007813, -0.007813);
    //Instruction 1115
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1116
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1117
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, -0.007813, -0.007813);
    //Instruction 1118
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1119
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1120
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 1121
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 1122
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1123
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1124
    //SAMPLE
    t10_0 = texture(_LightTextureB0, t0.xx).w;
    //Instruction 1125
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 1126
    //MUL
    t16_0 = t10_7 * t10_0;
    //Instruction 1127
    //MUL
    t16_0 = t16_3.x * t16_0;
    //Instruction 1128
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1129
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1130
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1131
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 1132
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 1133
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 1134
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1135
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 1136
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 1137
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 1138
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1139
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 1140
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 1141
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 1142
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 1143
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 1144
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 1145
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 1146
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 1147
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 1148
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 1149
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 1150
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 1151
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 1152
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1153
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 1154
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1155
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1156
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1157
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 1158
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 1159
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 1160
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 1161
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 1162
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 1163
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 1164
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 1165
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1166
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 1167
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 1168
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1169
    //MAD
    t16_4.xyz = _Color.xyz * t10_1.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1170
    //MUL
    t16_1.xyz = t10_1.xyz * _Color.xyz;
    //Instruction 1171
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1172
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 1173
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1174
    //MAD
    t16_4.xyz = t16_1.xyz * vec3(t16_24) + t16_4.xyz;
    //Instruction 1175
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 1176
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 1177
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1178
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1250
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1251
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1252
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1253
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1254
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1255
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1256
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1257
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1258
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1259
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1260
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1261
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1262
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1263
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1264
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1265
    //MOV
    t1.w = t0.x;
    //Instruction 1266
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1267
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1268
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1269
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1270
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1271
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1272
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1273
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1274
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1275
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1276
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1277
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1278
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1279
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1280
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1281
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1282
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1283
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1284
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1285
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1286
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1287
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1288
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1289
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1290
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1291
    //MOV
    t2.w = t0.z;
    //Instruction 1292
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1293
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1294
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 1295
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 1296
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 1297
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 1298
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 1299
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 1300
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 1301
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1302
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 1200
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1201
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1202
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1203
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1204
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1205
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 1206
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1207
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 1208
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 1209
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 1210
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 1211
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 1212
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 1213
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1214
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1215
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1216
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1217
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1218
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1219
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 1220
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1221
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 1222
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 1223
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 1224
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1225
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 1226
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1227
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 1228
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1229
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1230
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1231
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 1232
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1233
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 1234
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1235
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1236
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1237
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 1238
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1239
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 1240
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1241
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1242
    //SAMPLE_C_LZ
    vec3 txVec3 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    //Instruction 1243
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1244
    //MAD
    t16_15 = t16_15 * t16_1.x + _LightShadowData.x;
    //Instruction 1245
    //MUL
    t16_1.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 1246
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 1247
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 1248
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1249
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1295
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1296
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1297
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1298
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1299
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1300
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1301
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1302
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1303
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1304
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1305
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1306
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1307
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1308
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1309
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1310
    //MOV
    t1.w = t0.x;
    //Instruction 1311
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1312
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1313
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1314
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1315
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1316
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1317
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1318
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1319
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1320
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1321
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1322
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1323
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1324
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1325
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1326
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1327
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1328
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1329
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1330
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1331
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1332
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1333
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1334
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1335
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1336
    //MOV
    t2.w = t0.z;
    //Instruction 1337
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1338
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1339
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1340
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1341
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1342
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1343
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1344
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1345
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1346
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 1347
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1348
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1349
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1350
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1351
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 1352
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 1353
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 1354
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 1355
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 1356
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 1357
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 1358
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_4;
mediump vec2 t16_7;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 1243
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1244
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1245
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1246
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1247
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1248
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 1249
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1250
    //MAX
    t16_2 = max(t16_15, 0.001000);
    //Instruction 1251
    //RSQ
    t16_15 = inversesqrt(t16_2);
    //Instruction 1252
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 1253
    //DP3
    t16_15 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 1254
    //MAX
    t16_2 = max(t16_15, 0.0);
    //Instruction 1255
    //MUL
    t16_15 = t16_2 * t16_2;
    //Instruction 1256
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1257
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1258
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1259
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1260
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1261
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1262
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_3.x;
    //Instruction 1263
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1264
    //MAD
    t16_2 = t16_15 * t16_2 + 0.000100;
    //Instruction 1265
    //MAD
    t16_15 = t16_16 * t16_16 + 1.0;
    //Instruction 1266
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 1267
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1268
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 1269
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1270
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 1271
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1272
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1273
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1274
    //MUL
    t16_0.x = t16_0.x * t16_16;
    //Instruction 1275
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1276
    //MUL
    t16_0.x = t16_0.x * t16_15;
    //Instruction 1277
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1278
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 1279
    //MAD
    t16_0.xyz = _Color.xyz * t10_4.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1280
    //MUL
    t16_4.xyz = t10_4.xyz * _Color.xyz;
    //Instruction 1281
    //MAD
    t16_0.xyz = vec3(_Metallic) * t16_0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1282
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    //Instruction 1283
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1284
    //MAD
    t16_0.xyz = t16_4.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 1285
    //SAMPLE_C_LZ
    vec3 txVec6 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    //Instruction 1286
    //ADD
    t16_1.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1287
    //MAD
    t16_15 = t16_15 * t16_1.x + _LightShadowData.x;
    //Instruction 1288
    //SAMPLE
    t10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 1289
    //MUL
    t16_2 = t16_15 * t10_2;
    //Instruction 1290
    //MUL
    t16_1.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 1291
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 1292
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_0.xyz;
    //Instruction 1293
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 1294
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1355
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1356
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1357
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1358
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1359
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1360
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1361
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1362
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1363
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1364
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1365
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1366
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1367
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1368
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1369
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1370
    //MOV
    t1.w = t0.x;
    //Instruction 1371
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1372
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1373
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1374
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1375
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1376
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1377
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1378
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1379
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1380
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1381
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1382
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1383
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1384
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1385
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1386
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1387
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1388
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1389
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1390
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1391
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1392
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1393
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1394
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1395
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1396
    //MOV
    t2.w = t0.z;
    //Instruction 1397
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1398
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1399
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1400
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1401
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1402
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1403
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1404
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1405
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1406
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1407
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1408
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1409
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1410
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1411
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1412
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1413
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1414
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1415
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1416
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1417
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
highp float t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_8;
mediump float t16_13;
void main()
{
    //Instruction 1303
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1304
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1305
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1306
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1307
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1308
    //DP3
    t16_4.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1309
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 1310
    //MUL
    t16_4.xyz = t16_4.xxx * t16_1.xyz;
    //Instruction 1311
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_4.xyz;
    //Instruction 1312
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1313
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 1314
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 1315
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 1316
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 1317
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 1318
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 1319
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 1320
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 1321
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 1322
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 1323
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 1324
    //DIV
    t16_13 = 10.000000 / t16_13;
    //Instruction 1325
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 1326
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 1327
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 1328
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1329
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1330
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1331
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1332
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1333
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1334
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 1335
    //MUL
    t16_4.x = t16_13 * t16_13;
    //Instruction 1336
    //MAD
    t16_8 = t16_13 * t16_13 + 1.0;
    //Instruction 1337
    //MUL
    t16_0.x = t16_0.x * t16_4.x;
    //Instruction 1338
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1339
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 1340
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1341
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1342
    //MAD
    t16_1.xyz = t10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1343
    //MUL
    t16_0 = t10_0.wxyz * _Color.wxyz;
    //Instruction 1344
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1345
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    //Instruction 1346
    //MAD
    t16_13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1347
    //MAD
    t16_1.xyz = t16_0.yzw * vec3(t16_13) + t16_1.xyz;
    //Instruction 1348
    //MOV
    SV_Target0.w = t16_0.x;
    //Instruction 1349
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1350
    //SAMPLE
    t10_2 = texture(_LightTexture0, vec2(t2)).w;
    //Instruction 1351
    //MUL
    t16_3.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 1352
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 1353
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_1.xyz;
    //Instruction 1354
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1464
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1465
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1466
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1467
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1468
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1469
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1470
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1471
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1472
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1473
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1474
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1475
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1476
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1477
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1478
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1479
    //MOV
    t1.w = t0.x;
    //Instruction 1480
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1481
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1482
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1483
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1484
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1485
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1486
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1487
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1488
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1489
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1490
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1491
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1492
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1493
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1494
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1495
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1496
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1497
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1498
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1499
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1500
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1501
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1502
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1503
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1504
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1505
    //MOV
    t2.w = t0.z;
    //Instruction 1506
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1507
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump vec3 t16_3;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 1418
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1419
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1420
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1421
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1422
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1423
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 1424
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1425
    //MAX
    t16_2 = max(t16_12, 0.001000);
    //Instruction 1426
    //RSQ
    t16_12 = inversesqrt(t16_2);
    //Instruction 1427
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 1428
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 1429
    //MAX
    t16_2 = max(t16_12, 0.0);
    //Instruction 1430
    //MUL
    t16_12 = t16_2 * t16_2;
    //Instruction 1431
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 1432
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 1433
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 1434
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 1435
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 1436
    //DIV
    t16_13 = 10.000000 / t16_13;
    //Instruction 1437
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 1438
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1439
    //MAD
    t16_2 = t16_12 * t16_2 + 0.000100;
    //Instruction 1440
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 1441
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 1442
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1443
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 1444
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1445
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 1446
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1447
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1448
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 1449
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 1450
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1451
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 1452
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1453
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1454
    //MAD
    t16_1.xyz = t10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1455
    //MUL
    t16_0 = t10_0.wxyz * _Color.wxyz;
    //Instruction 1456
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1457
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    //Instruction 1458
    //MAD
    t16_13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1459
    //MAD
    t16_1.xyz = t16_0.yzw * vec3(t16_13) + t16_1.xyz;
    //Instruction 1460
    //MOV
    SV_Target0.w = t16_0.x;
    //Instruction 1461
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 1462
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_1.xyz;
    //Instruction 1463
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1418
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1419
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1420
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1421
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1422
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1423
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1424
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1425
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1426
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1427
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1428
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1429
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1430
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1431
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1432
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1433
    //MOV
    t1.w = t0.x;
    //Instruction 1434
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1435
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1436
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1437
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1438
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1439
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1440
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1441
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1442
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1443
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1444
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1445
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1446
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1447
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1448
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1449
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1450
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1451
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1452
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1453
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1454
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1455
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1456
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1457
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1458
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1459
    //MOV
    t2.w = t0.z;
    //Instruction 1460
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1461
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1462
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1463
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1464
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1465
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1466
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1467
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1468
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1469
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 1470
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 1471
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 1472
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 1473
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 1474
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 1475
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 1476
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 1477
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 1478
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 1479
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 1480
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 1481
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 1482
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 1483
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 1484
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 1485
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1486
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec2 t16_7;
mediump float t16_10;
bool tb12;
mediump float t16_16;
void main()
{
    //Instruction 1359
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1360
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1361
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1362
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1363
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1364
    //DP3
    t16_5.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1365
    //RSQ
    t16_5.x = inversesqrt(t16_5.x);
    //Instruction 1366
    //MUL
    t16_5.xyz = t16_5.xxx * t16_1.xyz;
    //Instruction 1367
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_5.xyz;
    //Instruction 1368
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1369
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 1370
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 1371
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 1372
    //DP3
    t16_0.x = dot(t16_5.xyz, t16_1.xyz);
    //Instruction 1373
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 1374
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 1375
    //ADD
    t16_16 = (-_Glossiness) + 1.0;
    //Instruction 1376
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 1377
    //ADD
    t16_16 = (-t16_16) + 1.0;
    //Instruction 1378
    //MAD
    t16_16 = t16_16 * 0.968000 + 0.030000;
    //Instruction 1379
    //LOG
    t16_16 = log2(t16_16);
    //Instruction 1380
    //DIV
    t16_16 = 10.000000 / t16_16;
    //Instruction 1381
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 1382
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 1383
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 1384
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1385
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1386
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1387
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1388
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_5.xyz);
    //Instruction 1389
    //MAX
    t16_7.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1390
    //LOG
    t16_0.x = log2(t16_7.y);
    //Instruction 1391
    //MUL
    t16_5.x = t16_16 * t16_16;
    //Instruction 1392
    //MAD
    t16_10 = t16_16 * t16_16 + 1.0;
    //Instruction 1393
    //MUL
    t16_0.x = t16_0.x * t16_5.x;
    //Instruction 1394
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1395
    //MUL
    t16_0.x = t16_0.x * t16_10;
    //Instruction 1396
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1397
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1398
    //MAD
    t16_1.xyz = t10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1399
    //MUL
    t16_0 = t10_0.wxyz * _Color.wxyz;
    //Instruction 1400
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1401
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    //Instruction 1402
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1403
    //MAD
    t16_1.xyz = t16_0.yzw * vec3(t16_16) + t16_1.xyz;
    //Instruction 1404
    //MOV
    SV_Target0.w = t16_0.x;
    //Instruction 1405
    //DIV
    t16_3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 1406
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 1407
    //SAMPLE
    t10_2 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 1408
    //LT
    tb12 = 0.0<vs_TEXCOORD5.z;
    //Instruction 1409
    //MOVC
    t10_4 = (tb12) ? 1.0 : 0.0;
    //Instruction 1410
    //MUL
    t10_4 = t10_2 * t10_4;
    //Instruction 1411
    //DP3
    t16_2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1412
    //SAMPLE
    t10_2 = texture(_LightTextureB0, vec2(t16_2)).w;
    //Instruction 1413
    //MUL
    t10_4 = t10_2 * t10_4;
    //Instruction 1414
    //MUL
    t16_3.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 1415
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 1416
    //MUL
    SV_Target0.xyz = t16_7.xxx * t16_1.xyz;
    //Instruction 1417
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1562
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1563
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1564
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1565
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1566
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1567
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1568
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1569
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1570
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1571
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1572
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1573
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1574
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1575
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1576
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1577
    //MOV
    t1.w = t0.x;
    //Instruction 1578
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1579
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1580
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1581
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1582
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1583
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1584
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1585
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1586
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1587
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1588
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1589
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1590
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1591
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1592
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1593
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1594
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1595
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1596
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1597
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1598
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1599
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1600
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1601
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1602
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1603
    //MOV
    t2.w = t0.z;
    //Instruction 1604
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1605
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1606
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1607
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1608
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1609
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1610
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1611
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1612
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1613
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1614
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1615
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1616
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1617
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1618
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1619
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1620
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1621
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1622
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1623
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1624
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
highp float t2;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec2 t16_6;
mediump float t16_8;
lowp float t10_10;
mediump float t16_13;
void main()
{
    //Instruction 1508
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1509
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1510
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1511
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1512
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1513
    //DP3
    t16_4.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1514
    //RSQ
    t16_4.x = inversesqrt(t16_4.x);
    //Instruction 1515
    //MUL
    t16_4.xyz = t16_4.xxx * t16_1.xyz;
    //Instruction 1516
    //MAD
    t16_1.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_4.xyz;
    //Instruction 1517
    //DP3
    t16_0.x = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 1518
    //MAX
    t16_2 = max(t16_0.x, 0.001000);
    //Instruction 1519
    //RSQ
    t16_0.x = inversesqrt(t16_2);
    //Instruction 1520
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    //Instruction 1521
    //DP3
    t16_0.x = dot(t16_4.xyz, t16_1.xyz);
    //Instruction 1522
    //MAX
    t16_2 = max(t16_0.x, 0.0);
    //Instruction 1523
    //MUL
    t16_0.x = t16_2 * t16_2;
    //Instruction 1524
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 1525
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 1526
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 1527
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 1528
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 1529
    //DIV
    t16_13 = 10.000000 / t16_13;
    //Instruction 1530
    //MAD
    t16_0.x = t16_0.x * _Glossiness + t16_3.x;
    //Instruction 1531
    //MUL
    t16_0.x = t16_0.x * unity_LightGammaCorrectionConsts.z;
    //Instruction 1532
    //MAD
    t16_2 = t16_0.x * t16_2 + 0.000100;
    //Instruction 1533
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1534
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1535
    //MUL
    t16_3.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1536
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1537
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1538
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1539
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 1540
    //MUL
    t16_4.x = t16_13 * t16_13;
    //Instruction 1541
    //MAD
    t16_8 = t16_13 * t16_13 + 1.0;
    //Instruction 1542
    //MUL
    t16_0.x = t16_0.x * t16_4.x;
    //Instruction 1543
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1544
    //MUL
    t16_0.x = t16_0.x * t16_8;
    //Instruction 1545
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1546
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1547
    //MAD
    t16_1.xyz = t10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1548
    //MUL
    t16_0 = t10_0.wxyz * _Color.wxyz;
    //Instruction 1549
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1550
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    //Instruction 1551
    //MAD
    t16_13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1552
    //MAD
    t16_1.xyz = t16_0.yzw * vec3(t16_13) + t16_1.xyz;
    //Instruction 1553
    //MOV
    SV_Target0.w = t16_0.x;
    //Instruction 1554
    //DP3
    t2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1555
    //SAMPLE
    t10_2 = texture(_LightTextureB0, vec2(t2)).w;
    //Instruction 1556
    //SAMPLE
    t10_10 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 1557
    //MUL
    t16_2 = t10_10 * t10_2;
    //Instruction 1558
    //MUL
    t16_3.xyz = vec3(t16_2) * _LightColor0.xyz;
    //Instruction 1559
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 1560
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_1.xyz;
    //Instruction 1561
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1535
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1536
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1537
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1538
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1539
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1540
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1541
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1542
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1543
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1544
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1545
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1546
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1547
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1548
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1549
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1550
    //MOV
    t1.w = t0.x;
    //Instruction 1551
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1552
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1553
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1554
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1555
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1556
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1557
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1558
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1559
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1560
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1561
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1562
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1563
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1564
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1565
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1566
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1567
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1568
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1569
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1570
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1571
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1572
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1573
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1574
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1575
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1576
    //MOV
    t2.w = t0.z;
    //Instruction 1577
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1578
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1579
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 1580
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 1581
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 1582
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 1583
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 1584
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 1585
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 1586
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 1587
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 1588
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 1589
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 1590
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 1591
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 1592
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 1487
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1488
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 1489
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 1490
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 1491
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 1492
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 1493
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 1494
    //MAX
    t16_2 = max(t16_12, 0.001000);
    //Instruction 1495
    //RSQ
    t16_12 = inversesqrt(t16_2);
    //Instruction 1496
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 1497
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 1498
    //MAX
    t16_2 = max(t16_12, 0.0);
    //Instruction 1499
    //MUL
    t16_12 = t16_2 * t16_2;
    //Instruction 1500
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 1501
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 1502
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 1503
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 1504
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 1505
    //DIV
    t16_13 = 10.000000 / t16_13;
    //Instruction 1506
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 1507
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1508
    //MAD
    t16_2 = t16_12 * t16_2 + 0.000100;
    //Instruction 1509
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 1510
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 1511
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1512
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 1513
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 1514
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 1515
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 1516
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 1517
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 1518
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 1519
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 1520
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 1521
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 1522
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1523
    //MAD
    t16_1.xyz = t10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1524
    //MUL
    t16_0 = t10_0.wxyz * _Color.wxyz;
    //Instruction 1525
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1526
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    //Instruction 1527
    //MAD
    t16_13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1528
    //MAD
    t16_1.xyz = t16_0.yzw * vec3(t16_13) + t16_1.xyz;
    //Instruction 1529
    //MOV
    SV_Target0.w = t16_0.x;
    //Instruction 1530
    //SAMPLE
    t10_2 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 1531
    //MUL
    t16_3.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 1532
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 1533
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_1.xyz;
    //Instruction 1534
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1658
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1659
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1660
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1661
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1662
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1663
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1664
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1665
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1666
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1667
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1668
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1669
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1670
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1671
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1672
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1673
    //MOV
    t1.w = t0.x;
    //Instruction 1674
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1675
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1676
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1677
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1678
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1679
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1680
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1681
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1682
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1683
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1684
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1685
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1686
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1687
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1688
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1689
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1690
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1691
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1692
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1693
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1694
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1695
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1696
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1697
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1698
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1699
    //MOV
    t2.w = t0.z;
    //Instruction 1700
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1701
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1702
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1703
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1704
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1705
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1706
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1707
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1708
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1709
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 1710
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 1711
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 1712
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 1713
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 1714
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 1715
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 1716
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 1717
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 1718
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 1719
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 1720
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 1721
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 1722
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 1723
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 1724
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 1725
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1726
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 1727
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 1728
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 1729
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 1730
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 1731
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp float t10_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_7;
bool tb7;
mediump float t16_9;
mediump float t16_13;
mediump float t16_18;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 1593
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 1594
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 1595
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 1596
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 1597
    //MOVC
    t10_2.x = (tb7) ? 1.0 : 0.0;
    //Instruction 1598
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 1599
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1600
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 1601
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 1602
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 1603
    //SAMPLE_C_LZ
    vec3 txVec7 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    //Instruction 1604
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1605
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 1606
    //MUL
    t10_2.x = t16_0.x * t10_2.x;
    //Instruction 1607
    //MUL
    t16_0.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 1608
    //DP3
    t16_18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1609
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 1610
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 1611
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 1612
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 1613
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 1614
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 1615
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 1616
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_18) + t16_3.xyz;
    //Instruction 1617
    //DP3
    t16_18 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1618
    //MAX
    t16_1.x = max(t16_18, 0.001000);
    //Instruction 1619
    //RSQ
    t16_18 = inversesqrt(t16_1.x);
    //Instruction 1620
    //MUL
    t16_4.xyz = vec3(t16_18) * t16_4.xyz;
    //Instruction 1621
    //DP3
    t16_18 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1622
    //MAX
    t16_1.x = max(t16_18, 0.0);
    //Instruction 1623
    //MUL
    t16_18 = t16_1.x * t16_1.x;
    //Instruction 1624
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 1625
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 1626
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 1627
    //MAD
    t16_21 = t16_21 * 0.968000 + 0.030000;
    //Instruction 1628
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 1629
    //DIV
    t16_21 = 10.000000 / t16_21;
    //Instruction 1630
    //MAD
    t16_18 = t16_18 * _Glossiness + t16_22;
    //Instruction 1631
    //MUL
    t16_18 = t16_18 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1632
    //MAD
    t16_1.x = t16_18 * t16_1.x + 0.000100;
    //Instruction 1633
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1634
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 1635
    //MUL
    t16_5.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 1636
    //DP3
    t16_18 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 1637
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 1638
    //MAX
    t16_7 = max(t16_3.x, 0.0);
    //Instruction 1639
    //MAX
    t16_13 = max(t16_18, 0.0);
    //Instruction 1640
    //LOG
    t16_18 = log2(t16_13);
    //Instruction 1641
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 1642
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 1643
    //MUL
    t16_18 = t16_18 * t16_3.x;
    //Instruction 1644
    //EXP
    t16_18 = exp2(t16_18);
    //Instruction 1645
    //MUL
    t16_18 = t16_18 * t16_9;
    //Instruction 1646
    //DIV
    t16_1.x = t16_18 / t16_1.x;
    //Instruction 1647
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1648
    //MAD
    t16_3.xyz = t10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1649
    //MUL
    t16_2 = t10_2.wxyz * _Color.wxyz;
    //Instruction 1650
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1651
    //MUL
    t16_3.xyz = t16_1.xxx * t16_3.xyz;
    //Instruction 1652
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1653
    //MAD
    t16_3.xyz = t16_2.yzw * vec3(t16_18) + t16_3.xyz;
    //Instruction 1654
    //MOV
    SV_Target0.w = t16_2.x;
    //Instruction 1655
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 1656
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_0.xyz;
    //Instruction 1657
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1687
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1688
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1689
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1690
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1691
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1692
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1693
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1694
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1695
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1696
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1697
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1698
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1699
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1700
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1701
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1702
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1703
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1704
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1705
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1706
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1707
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1708
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1709
    //MOV
    t1.w = t2.x;
    //Instruction 1710
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1711
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1712
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1713
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1714
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1715
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1716
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1717
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1718
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1719
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1720
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1721
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1722
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1723
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1724
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1725
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1726
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1727
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1728
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1729
    //MOV
    t0.w = t2.z;
    //Instruction 1730
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1731
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1732
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1733
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1734
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1735
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1736
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1737
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1738
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1739
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1740
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1741
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1742
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1743
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1744
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1745
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1746
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1747
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1748
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1749
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1750
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
mediump float t16_9;
mediump float t16_12;
mediump float t16_20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 1625
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1626
    //SQRT
    t0 = sqrt(t0);
    //Instruction 1627
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 1628
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 1629
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 1630
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1631
    //LT
    tb0 = t6<t0;
    //Instruction 1632
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 1633
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1634
    //SAMPLE
    t10_0 = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 1635
    //MUL
    t16_0 = t16_2.x * t10_0;
    //Instruction 1636
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1637
    //DP3
    t16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1638
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 1639
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 1640
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 1641
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 1642
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 1643
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 1644
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 1645
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_20) + t16_3.xyz;
    //Instruction 1646
    //DP3
    t16_20 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1647
    //MAX
    t16_0 = max(t16_20, 0.001000);
    //Instruction 1648
    //RSQ
    t16_20 = inversesqrt(t16_0);
    //Instruction 1649
    //MUL
    t16_4.xyz = vec3(t16_20) * t16_4.xyz;
    //Instruction 1650
    //DP3
    t16_20 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1651
    //MAX
    t16_0 = max(t16_20, 0.0);
    //Instruction 1652
    //MUL
    t16_20 = t16_0 * t16_0;
    //Instruction 1653
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 1654
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 1655
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 1656
    //MAD
    t16_21 = t16_21 * 0.968000 + 0.030000;
    //Instruction 1657
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 1658
    //DIV
    t16_21 = 10.000000 / t16_21;
    //Instruction 1659
    //MAD
    t16_20 = t16_20 * _Glossiness + t16_22;
    //Instruction 1660
    //MUL
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1661
    //MAD
    t16_0 = t16_20 * t16_0 + 0.000100;
    //Instruction 1662
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1663
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 1664
    //MUL
    t16_5.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 1665
    //DP3
    t16_20 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 1666
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 1667
    //MAX
    t16_6 = max(t16_3.x, 0.0);
    //Instruction 1668
    //MAX
    t16_12 = max(t16_20, 0.0);
    //Instruction 1669
    //LOG
    t16_20 = log2(t16_12);
    //Instruction 1670
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 1671
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 1672
    //MUL
    t16_20 = t16_20 * t16_3.x;
    //Instruction 1673
    //EXP
    t16_20 = exp2(t16_20);
    //Instruction 1674
    //MUL
    t16_20 = t16_20 * t16_9;
    //Instruction 1675
    //DIV
    t16_0 = t16_20 / t16_0;
    //Instruction 1676
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1677
    //MAD
    t16_3.xyz = t10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1678
    //MUL
    t16_1 = t10_1.wxyz * _Color.wxyz;
    //Instruction 1679
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1680
    //MUL
    t16_3.xyz = vec3(t16_0) * t16_3.xyz;
    //Instruction 1681
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1682
    //MAD
    t16_3.xyz = t16_1.yzw * vec3(t16_20) + t16_3.xyz;
    //Instruction 1683
    //MOV
    SV_Target0.w = t16_1.x;
    //Instruction 1684
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 1685
    //MUL
    SV_Target0.xyz = vec3(t16_6) * t16_2.xyz;
    //Instruction 1686
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1815
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1816
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1817
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1818
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1819
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1820
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1821
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1822
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1823
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1824
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1825
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1826
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1827
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1828
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1829
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1830
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1831
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1832
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1833
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1834
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1835
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1836
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1837
    //MOV
    t1.w = t2.x;
    //Instruction 1838
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1839
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1840
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1841
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1842
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1843
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1844
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1845
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1846
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1847
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1848
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1849
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1850
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1851
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1852
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1853
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1854
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1855
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1856
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1857
    //MOV
    t0.w = t2.z;
    //Instruction 1858
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1859
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1860
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1861
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1862
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1863
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1864
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1865
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1866
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1867
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 1868
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 1869
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 1870
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 1871
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 1872
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 1873
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 1874
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 1875
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 1876
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 1877
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 1878
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump float t16_6;
lowp float t10_6;
mediump float t16_9;
mediump float t16_12;
mediump float t16_20;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 1751
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1752
    //SQRT
    t0 = sqrt(t0);
    //Instruction 1753
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 1754
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 1755
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 1756
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1757
    //LT
    tb0 = t6<t0;
    //Instruction 1758
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 1759
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1760
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 1761
    //SAMPLE
    t10_6 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 1762
    //MUL
    t16_0 = t10_6 * t10_0;
    //Instruction 1763
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 1764
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1765
    //DP3
    t16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1766
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 1767
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 1768
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 1769
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 1770
    //DP3
    t16_21 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 1771
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 1772
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 1773
    //MAD
    t16_4.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_20) + t16_3.xyz;
    //Instruction 1774
    //DP3
    t16_20 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1775
    //MAX
    t16_0 = max(t16_20, 0.001000);
    //Instruction 1776
    //RSQ
    t16_20 = inversesqrt(t16_0);
    //Instruction 1777
    //MUL
    t16_4.xyz = vec3(t16_20) * t16_4.xyz;
    //Instruction 1778
    //DP3
    t16_20 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 1779
    //MAX
    t16_0 = max(t16_20, 0.0);
    //Instruction 1780
    //MUL
    t16_20 = t16_0 * t16_0;
    //Instruction 1781
    //ADD
    t16_21 = (-_Glossiness) + 1.0;
    //Instruction 1782
    //MUL
    t16_22 = t16_21 * t16_21;
    //Instruction 1783
    //ADD
    t16_21 = (-t16_21) + 1.0;
    //Instruction 1784
    //MAD
    t16_21 = t16_21 * 0.968000 + 0.030000;
    //Instruction 1785
    //LOG
    t16_21 = log2(t16_21);
    //Instruction 1786
    //DIV
    t16_21 = 10.000000 / t16_21;
    //Instruction 1787
    //MAD
    t16_20 = t16_20 * _Glossiness + t16_22;
    //Instruction 1788
    //MUL
    t16_20 = t16_20 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1789
    //MAD
    t16_0 = t16_20 * t16_0 + 0.000100;
    //Instruction 1790
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1791
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 1792
    //MUL
    t16_5.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 1793
    //DP3
    t16_20 = dot(t16_5.xyz, t16_4.xyz);
    //Instruction 1794
    //DP3
    t16_3.x = dot(t16_5.xyz, t16_3.xyz);
    //Instruction 1795
    //MAX
    t16_6 = max(t16_3.x, 0.0);
    //Instruction 1796
    //MAX
    t16_12 = max(t16_20, 0.0);
    //Instruction 1797
    //LOG
    t16_20 = log2(t16_12);
    //Instruction 1798
    //MUL
    t16_3.x = t16_21 * t16_21;
    //Instruction 1799
    //MAD
    t16_9 = t16_21 * t16_21 + 1.0;
    //Instruction 1800
    //MUL
    t16_20 = t16_20 * t16_3.x;
    //Instruction 1801
    //EXP
    t16_20 = exp2(t16_20);
    //Instruction 1802
    //MUL
    t16_20 = t16_20 * t16_9;
    //Instruction 1803
    //DIV
    t16_0 = t16_20 / t16_0;
    //Instruction 1804
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1805
    //MAD
    t16_3.xyz = t10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1806
    //MUL
    t16_1 = t10_1.wxyz * _Color.wxyz;
    //Instruction 1807
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1808
    //MUL
    t16_3.xyz = vec3(t16_0) * t16_3.xyz;
    //Instruction 1809
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1810
    //MAD
    t16_3.xyz = t16_1.yzw * vec3(t16_20) + t16_3.xyz;
    //Instruction 1811
    //MOV
    SV_Target0.w = t16_1.x;
    //Instruction 1812
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 1813
    //MUL
    SV_Target0.xyz = vec3(t16_6) * t16_2.xyz;
    //Instruction 1814
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 1805
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1806
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1807
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1808
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1809
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1810
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1811
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1812
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1813
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1814
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1815
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1816
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1817
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1818
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1819
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1820
    //MOV
    t1.w = t0.x;
    //Instruction 1821
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1822
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 1823
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 1824
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1825
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1826
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 1827
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1828
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1829
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1830
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1831
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1832
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1833
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1834
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1835
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1836
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1837
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1838
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 1839
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 1840
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 1841
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 1842
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 1843
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1844
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1845
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 1846
    //MOV
    t2.w = t0.z;
    //Instruction 1847
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 1848
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1849
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1850
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1851
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 1852
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 1853
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 1854
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 1855
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 1856
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 1857
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 1858
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 1859
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 1860
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 1861
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 1862
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 1863
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 1864
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 1865
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 1866
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 1867
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 1868
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 1869
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 1870
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 1871
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 1872
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 1873
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 1874
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 1875
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 1876
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 1877
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 1878
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec3 t16_1;
highp vec4 t2;
mediump vec4 t16_2;
lowp vec4 t10_2;
highp vec3 t3;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
mediump float t16_9;
lowp float t10_9;
mediump float t16_13;
mediump float t16_17;
bool tb17;
mediump float t16_24;
mediump float t16_29;
mediump float t16_30;
void main()
{
    //Instruction 1732
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 1733
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 1734
    //ADD
    t2.xyz = t16_1.xyz + _ShadowOffsets[0].xyz;
    //Instruction 1735
    //SAMPLE_C_LZ
    vec3 txVec8 = vec3(t2.xy,t2.z);
    t2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    //Instruction 1736
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[1].xyz;
    //Instruction 1737
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t3.xy,t3.z);
    t2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 1738
    //ADD
    t3.xyz = t16_1.xyz + _ShadowOffsets[2].xyz;
    //Instruction 1739
    //ADD
    t1.xyz = t16_1.xyz + _ShadowOffsets[3].xyz;
    //Instruction 1740
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(t1.xy,t1.z);
    t2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 1741
    //SAMPLE_C_LZ
    vec3 txVec11 = vec3(t3.xy,t3.z);
    t2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec11, 0.0);
    //Instruction 1742
    //MAD
    t16_0 = t2 * t16_0.xxxx + _LightShadowData.xxxx;
    //Instruction 1743
    //DP4
    t16_1.x = dot(t16_0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1744
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 1745
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 1746
    //SAMPLE
    t10_9 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 1747
    //LT
    tb17 = 0.0<vs_TEXCOORD5.z;
    //Instruction 1748
    //MOVC
    t10_4 = (tb17) ? 1.0 : 0.0;
    //Instruction 1749
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 1750
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1751
    //SAMPLE
    t10_9 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 1752
    //MUL
    t10_4 = t10_9 * t10_4;
    //Instruction 1753
    //MUL
    t10_4 = t16_1.x * t10_4;
    //Instruction 1754
    //MUL
    t16_0.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 1755
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1756
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1757
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 1758
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 1759
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 1760
    //DP3
    t16_29 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1761
    //RSQ
    t16_29 = inversesqrt(t16_29);
    //Instruction 1762
    //MUL
    t16_5.xyz = vec3(t16_29) * t16_5.xyz;
    //Instruction 1763
    //MAD
    t16_6.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_5.xyz;
    //Instruction 1764
    //DP3
    t16_24 = dot(t16_6.xyz, t16_6.xyz);
    //Instruction 1765
    //MAX
    t16_1.x = max(t16_24, 0.001000);
    //Instruction 1766
    //RSQ
    t16_24 = inversesqrt(t16_1.x);
    //Instruction 1767
    //MUL
    t16_6.xyz = vec3(t16_24) * t16_6.xyz;
    //Instruction 1768
    //DP3
    t16_24 = dot(t16_5.xyz, t16_6.xyz);
    //Instruction 1769
    //MAX
    t16_1.x = max(t16_24, 0.0);
    //Instruction 1770
    //MUL
    t16_24 = t16_1.x * t16_1.x;
    //Instruction 1771
    //ADD
    t16_29 = (-_Glossiness) + 1.0;
    //Instruction 1772
    //MUL
    t16_30 = t16_29 * t16_29;
    //Instruction 1773
    //ADD
    t16_29 = (-t16_29) + 1.0;
    //Instruction 1774
    //MAD
    t16_29 = t16_29 * 0.968000 + 0.030000;
    //Instruction 1775
    //LOG
    t16_29 = log2(t16_29);
    //Instruction 1776
    //DIV
    t16_29 = 10.000000 / t16_29;
    //Instruction 1777
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_30;
    //Instruction 1778
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1779
    //MAD
    t16_1.x = t16_24 * t16_1.x + 0.000100;
    //Instruction 1780
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1781
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1782
    //MUL
    t16_7.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1783
    //DP3
    t16_24 = dot(t16_7.xyz, t16_6.xyz);
    //Instruction 1784
    //DP3
    t16_5.x = dot(t16_7.xyz, t16_5.xyz);
    //Instruction 1785
    //MAX
    t16_9 = max(t16_5.x, 0.0);
    //Instruction 1786
    //MAX
    t16_17 = max(t16_24, 0.0);
    //Instruction 1787
    //LOG
    t16_24 = log2(t16_17);
    //Instruction 1788
    //MUL
    t16_5.x = t16_29 * t16_29;
    //Instruction 1789
    //MAD
    t16_13 = t16_29 * t16_29 + 1.0;
    //Instruction 1790
    //MUL
    t16_24 = t16_24 * t16_5.x;
    //Instruction 1791
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1792
    //MUL
    t16_24 = t16_24 * t16_13;
    //Instruction 1793
    //DIV
    t16_1.x = t16_24 / t16_1.x;
    //Instruction 1794
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1795
    //MAD
    t16_5.xyz = t10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1796
    //MUL
    t16_2 = t10_2.wxyz * _Color.wxyz;
    //Instruction 1797
    //MAD
    t16_5.xyz = vec3(_Metallic) * t16_5.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1798
    //MUL
    t16_5.xyz = t16_1.xxx * t16_5.xyz;
    //Instruction 1799
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1800
    //MAD
    t16_5.xyz = t16_2.yzw * vec3(t16_24) + t16_5.xyz;
    //Instruction 1801
    //MOV
    SV_Target0.w = t16_2.x;
    //Instruction 1802
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 1803
    //MUL
    SV_Target0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 1804
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1952
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1953
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1954
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1955
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1956
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1957
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1958
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1959
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1960
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1961
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1962
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1963
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1964
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1965
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1966
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1967
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1968
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1969
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1970
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1971
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1972
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1973
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1974
    //MOV
    t1.w = t2.x;
    //Instruction 1975
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1976
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1977
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1978
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1979
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1980
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1981
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1982
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1983
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1984
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1985
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1986
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1987
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1988
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1989
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1990
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1991
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1992
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1993
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1994
    //MOV
    t0.w = t2.z;
    //Instruction 1995
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1996
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1997
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 1998
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 1999
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2000
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2001
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2002
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2003
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2004
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2005
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2006
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2007
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2008
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2009
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2010
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2011
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2012
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2013
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2014
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2015
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 1879
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1880
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1881
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 1882
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 1883
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, 0.007813, 0.007813);
    //Instruction 1884
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1885
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1886
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, -0.007813, 0.007813);
    //Instruction 1887
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1888
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1889
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, 0.007813, -0.007813);
    //Instruction 1890
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1891
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1892
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, -0.007813, -0.007813);
    //Instruction 1893
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1894
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1895
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 1896
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 1897
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1898
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1899
    //SAMPLE
    t10_0 = texture(_LightTexture0, t0.xx).w;
    //Instruction 1900
    //MUL
    t16_0 = t16_3.x * t10_0;
    //Instruction 1901
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1902
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1903
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1904
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 1905
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 1906
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 1907
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1908
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 1909
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 1910
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 1911
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1912
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 1913
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 1914
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 1915
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 1916
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 1917
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 1918
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 1919
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 1920
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 1921
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 1922
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 1923
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 1924
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 1925
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1926
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 1927
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1928
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1929
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1930
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 1931
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 1932
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 1933
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 1934
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 1935
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 1936
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 1937
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 1938
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1939
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 1940
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 1941
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1942
    //MAD
    t16_4.xyz = t10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1943
    //MUL
    t16_1 = t10_1.wxyz * _Color.wxyz;
    //Instruction 1944
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1945
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 1946
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1947
    //MAD
    t16_4.xyz = t16_1.yzw * vec3(t16_24) + t16_4.xyz;
    //Instruction 1948
    //MOV
    SV_Target0.w = t16_1.x;
    //Instruction 1949
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 1950
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 1951
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec3 t2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 1954
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 1955
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 1956
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 1957
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 1958
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 1959
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 1960
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 1961
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 1962
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 1963
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 1964
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 1965
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 1966
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 1967
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 1968
    //MUL
    t1.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 1969
    //MAD
    t1.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t1.xyz;
    //Instruction 1970
    //MAD
    t1.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t1.xyz;
    //Instruction 1971
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 1972
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1973
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 1974
    //MAD
    t2.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 1975
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 1976
    //MOV
    t1.w = t2.x;
    //Instruction 1977
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 1978
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 1979
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 1980
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 1981
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 1982
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 1983
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 1984
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1985
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 1986
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 1987
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 1988
    //ADD
    t0.xyz = t0.xyz + t3.xyz;
    //Instruction 1989
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 1990
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 1991
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 1992
    //MUL
    t16_4.xyz = t1.yzx * t0.zxy;
    //Instruction 1993
    //MAD
    t16_4.xyz = t0.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 1994
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 1995
    //MOV
    vs_TEXCOORD3.w = t2.y;
    //Instruction 1996
    //MOV
    t0.w = t2.z;
    //Instruction 1997
    //MOV
    vs_TEXCOORD4 = t0;
    //Instruction 1998
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 1999
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2000
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2001
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2002
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2003
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2004
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2005
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2006
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2007
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2008
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2009
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2010
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2011
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2012
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2013
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2014
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2015
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2016
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2017
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bvec4 tb0;
highp vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp vec4 t2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t7;
mediump float t16_7;
lowp float t10_7;
mediump float t16_11;
mediump float t16_14;
mediump float t16_24;
mediump float t16_25;
mediump float t16_26;
void main()
{
    //Instruction 1879
    //DP3
    t0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 1880
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 1881
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 1882
    //MUL
    t0.x = t0.x * 0.970000;
    //Instruction 1883
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, 0.007813, 0.007813);
    //Instruction 1884
    //SAMPLE
    t1 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1885
    //DP4
    t1.x = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1886
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, -0.007813, 0.007813);
    //Instruction 1887
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1888
    //DP4
    t1.y = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1889
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(-0.007813, 0.007813, -0.007813);
    //Instruction 1890
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1891
    //DP4
    t1.z = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1892
    //ADD
    t7.xyz = vs_TEXCOORD6.xyz + vec3(0.007813, -0.007813, -0.007813);
    //Instruction 1893
    //SAMPLE
    t2 = texture(_ShadowMapTexture, t7.xyz);
    //Instruction 1894
    //DP4
    t1.w = dot(t2, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 1895
    //LT
    tb0 = lessThan(t1, t0.xxxx);
    //Instruction 1896
    //MOVC
    t0.x = (tb0.x) ? _LightShadowData.x : float(1.0);
    t0.y = (tb0.y) ? _LightShadowData.x : float(1.0);
    t0.z = (tb0.z) ? _LightShadowData.x : float(1.0);
    t0.w = (tb0.w) ? _LightShadowData.x : float(1.0);
    //Instruction 1897
    //DP4
    t16_3.x = dot(t0, vec4(0.250000, 0.250000, 0.250000, 0.250000));
    //Instruction 1898
    //DP3
    t0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 1899
    //SAMPLE
    t10_0 = texture(_LightTextureB0, t0.xx).w;
    //Instruction 1900
    //SAMPLE
    t10_7 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 1901
    //MUL
    t16_0 = t10_7 * t10_0;
    //Instruction 1902
    //MUL
    t16_0 = t16_3.x * t16_0;
    //Instruction 1903
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 1904
    //DP3
    t16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 1905
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1906
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 1907
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 1908
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 1909
    //DP3
    t16_25 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 1910
    //RSQ
    t16_25 = inversesqrt(t16_25);
    //Instruction 1911
    //MUL
    t16_4.xyz = vec3(t16_25) * t16_4.xyz;
    //Instruction 1912
    //MAD
    t16_5.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_24) + t16_4.xyz;
    //Instruction 1913
    //DP3
    t16_24 = dot(t16_5.xyz, t16_5.xyz);
    //Instruction 1914
    //MAX
    t16_0 = max(t16_24, 0.001000);
    //Instruction 1915
    //RSQ
    t16_24 = inversesqrt(t16_0);
    //Instruction 1916
    //MUL
    t16_5.xyz = vec3(t16_24) * t16_5.xyz;
    //Instruction 1917
    //DP3
    t16_24 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 1918
    //MAX
    t16_0 = max(t16_24, 0.0);
    //Instruction 1919
    //MUL
    t16_24 = t16_0 * t16_0;
    //Instruction 1920
    //ADD
    t16_25 = (-_Glossiness) + 1.0;
    //Instruction 1921
    //MUL
    t16_26 = t16_25 * t16_25;
    //Instruction 1922
    //ADD
    t16_25 = (-t16_25) + 1.0;
    //Instruction 1923
    //MAD
    t16_25 = t16_25 * 0.968000 + 0.030000;
    //Instruction 1924
    //LOG
    t16_25 = log2(t16_25);
    //Instruction 1925
    //DIV
    t16_25 = 10.000000 / t16_25;
    //Instruction 1926
    //MAD
    t16_24 = t16_24 * _Glossiness + t16_26;
    //Instruction 1927
    //MUL
    t16_24 = t16_24 * unity_LightGammaCorrectionConsts.z;
    //Instruction 1928
    //MAD
    t16_0 = t16_24 * t16_0 + 0.000100;
    //Instruction 1929
    //DP3
    t16_24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 1930
    //RSQ
    t16_24 = inversesqrt(t16_24);
    //Instruction 1931
    //MUL
    t16_6.xyz = vec3(t16_24) * vs_TEXCOORD4.xyz;
    //Instruction 1932
    //DP3
    t16_24 = dot(t16_6.xyz, t16_5.xyz);
    //Instruction 1933
    //DP3
    t16_4.x = dot(t16_6.xyz, t16_4.xyz);
    //Instruction 1934
    //MAX
    t16_7 = max(t16_4.x, 0.0);
    //Instruction 1935
    //MAX
    t16_14 = max(t16_24, 0.0);
    //Instruction 1936
    //LOG
    t16_24 = log2(t16_14);
    //Instruction 1937
    //MUL
    t16_4.x = t16_25 * t16_25;
    //Instruction 1938
    //MAD
    t16_11 = t16_25 * t16_25 + 1.0;
    //Instruction 1939
    //MUL
    t16_24 = t16_24 * t16_4.x;
    //Instruction 1940
    //EXP
    t16_24 = exp2(t16_24);
    //Instruction 1941
    //MUL
    t16_24 = t16_24 * t16_11;
    //Instruction 1942
    //DIV
    t16_0 = t16_24 / t16_0;
    //Instruction 1943
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 1944
    //MAD
    t16_4.xyz = t10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 1945
    //MUL
    t16_1 = t10_1.wxyz * _Color.wxyz;
    //Instruction 1946
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 1947
    //MUL
    t16_4.xyz = vec3(t16_0) * t16_4.xyz;
    //Instruction 1948
    //MAD
    t16_24 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 1949
    //MAD
    t16_4.xyz = t16_1.yzw * vec3(t16_24) + t16_4.xyz;
    //Instruction 1950
    //MOV
    SV_Target0.w = t16_1.x;
    //Instruction 1951
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 1952
    //MUL
    SV_Target0.xyz = vec3(t16_7) * t16_3.xyz;
    //Instruction 1953
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2066
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2067
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2068
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2069
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2070
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2071
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2072
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2073
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2074
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2075
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2076
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2077
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2078
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2079
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2080
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2081
    //MOV
    t1.w = t0.x;
    //Instruction 2082
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2083
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2084
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2085
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2086
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2087
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2088
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2089
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2090
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2091
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2092
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2093
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2094
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2095
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2096
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2097
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2098
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2099
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2100
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2101
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2102
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2103
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2104
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2105
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2106
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2107
    //MOV
    t2.w = t0.z;
    //Instruction 2108
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2109
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2110
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2111
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2112
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2113
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2114
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 2115
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 2116
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 2117
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2118
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump vec3 t16_3;
mediump vec2 t16_6;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 2016
    //DP3
    t16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2017
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2018
    //MOV
    t16_1.x = vs_TEXCOORD2.w;
    //Instruction 2019
    //MOV
    t16_1.y = vs_TEXCOORD3.w;
    //Instruction 2020
    //MOV
    t16_1.z = vs_TEXCOORD4.w;
    //Instruction 2021
    //MAD
    t16_0.xyz = (-vs_TEXCOORD1.xyz) * t16_0.xxx + t16_1.xyz;
    //Instruction 2022
    //DP3
    t16_12 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 2023
    //MAX
    t16_2 = max(t16_12, 0.001000);
    //Instruction 2024
    //RSQ
    t16_12 = inversesqrt(t16_2);
    //Instruction 2025
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 2026
    //DP3
    t16_12 = dot(t16_1.xyz, t16_0.xyz);
    //Instruction 2027
    //MAX
    t16_2 = max(t16_12, 0.0);
    //Instruction 2028
    //MUL
    t16_12 = t16_2 * t16_2;
    //Instruction 2029
    //ADD
    t16_13 = (-_Glossiness) + 1.0;
    //Instruction 2030
    //MUL
    t16_3.x = t16_13 * t16_13;
    //Instruction 2031
    //ADD
    t16_13 = (-t16_13) + 1.0;
    //Instruction 2032
    //MAD
    t16_13 = t16_13 * 0.968000 + 0.030000;
    //Instruction 2033
    //LOG
    t16_13 = log2(t16_13);
    //Instruction 2034
    //DIV
    t16_13 = 10.000000 / t16_13;
    //Instruction 2035
    //MAD
    t16_12 = t16_12 * _Glossiness + t16_3.x;
    //Instruction 2036
    //MUL
    t16_12 = t16_12 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2037
    //MAD
    t16_2 = t16_12 * t16_2 + 0.000100;
    //Instruction 2038
    //MAD
    t16_12 = t16_13 * t16_13 + 1.0;
    //Instruction 2039
    //MUL
    t16_13 = t16_13 * t16_13;
    //Instruction 2040
    //DP3
    t16_3.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2041
    //RSQ
    t16_3.x = inversesqrt(t16_3.x);
    //Instruction 2042
    //MUL
    t16_3.xyz = t16_3.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2043
    //DP3
    t16_0.x = dot(t16_3.xyz, t16_0.xyz);
    //Instruction 2044
    //DP3
    t16_0.y = dot(t16_3.xyz, t16_1.xyz);
    //Instruction 2045
    //MAX
    t16_6.xy = max(t16_0.yx, vec2(0.0, 0.0));
    //Instruction 2046
    //LOG
    t16_0.x = log2(t16_6.y);
    //Instruction 2047
    //MUL
    t16_0.x = t16_0.x * t16_13;
    //Instruction 2048
    //EXP
    t16_0.x = exp2(t16_0.x);
    //Instruction 2049
    //MUL
    t16_0.x = t16_0.x * t16_12;
    //Instruction 2050
    //DIV
    t16_2 = t16_0.x / t16_2;
    //Instruction 2051
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2052
    //MAD
    t16_1.xyz = t10_0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2053
    //MUL
    t16_0 = t10_0.wxyz * _Color.wxyz;
    //Instruction 2054
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2055
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    //Instruction 2056
    //MAD
    t16_13 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2057
    //MAD
    t16_1.xyz = t16_0.yzw * vec3(t16_13) + t16_1.xyz;
    //Instruction 2058
    //MOV
    SV_Target0.w = t16_0.x;
    //Instruction 2059
    //SAMPLE_C_LZ
    vec3 txVec4 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_13 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
    //Instruction 2060
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 2061
    //MAD
    t16_13 = t16_13 * t16_3.x + _LightShadowData.x;
    //Instruction 2062
    //MUL
    t16_3.xyz = vec3(t16_13) * _LightColor0.xyz;
    //Instruction 2063
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 2064
    //MUL
    SV_Target0.xyz = t16_6.xxx * t16_1.xyz;
    //Instruction 2065
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
void main()
{
    //Instruction 2071
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2072
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2073
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2074
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2075
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2076
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2077
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2078
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2079
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2080
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2081
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2082
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2083
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2084
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2085
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 2086
    //MOV
    t1.w = t0.x;
    //Instruction 2087
    //MUL
    t2.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2088
    //MAD
    t2.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t2.xyz;
    //Instruction 2089
    //MAD
    t2.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t2.xyz;
    //Instruction 2090
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2091
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2092
    //MUL
    t1.xyz = t0.xxx * t2.xyz;
    //Instruction 2093
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2094
    //MUL
    t2.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2095
    //MUL
    t2.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2096
    //MUL
    t2.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2097
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2098
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2099
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2100
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2101
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2102
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2103
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2104
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 2105
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 2106
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2107
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 2108
    //MUL
    t16_4.xyz = t1.yzx * t2.zxy;
    //Instruction 2109
    //MAD
    t16_4.xyz = t2.yzx * t1.zxy + (-t16_4.xyz);
    //Instruction 2110
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2111
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2112
    //MOV
    t2.w = t0.z;
    //Instruction 2113
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2114
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2115
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2116
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2117
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2118
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2119
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2120
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2121
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2122
    //DP4
    t2.x = dot(t16_0, t1);
    //Instruction 2123
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2124
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2125
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2126
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2127
    //DP4
    t2.y = dot(t16_0, t1);
    //Instruction 2128
    //MOV
    vs_TEXCOORD5.xy = t2.xy;
    //Instruction 2129
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 2130
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 2131
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 2132
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 2133
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2134
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_6;
mediump float t16_11;
mediump float t16_15;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 2018
    //SAMPLE_C_LZ
    vec3 txVec12 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec12, 0.0);
    //Instruction 2019
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 2020
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 2021
    //SAMPLE
    t10_1 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 2022
    //MUL
    t16_1 = t16_0.x * t10_1;
    //Instruction 2023
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 2024
    //DP3
    t16_15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2025
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 2026
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2027
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2028
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2029
    //MAD
    t16_3.xyz = (-vs_TEXCOORD1.xyz) * vec3(t16_15) + t16_2.xyz;
    //Instruction 2030
    //DP3
    t16_15 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 2031
    //MAX
    t16_1 = max(t16_15, 0.001000);
    //Instruction 2032
    //RSQ
    t16_15 = inversesqrt(t16_1);
    //Instruction 2033
    //MUL
    t16_3.xyz = vec3(t16_15) * t16_3.xyz;
    //Instruction 2034
    //DP3
    t16_15 = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 2035
    //MAX
    t16_1 = max(t16_15, 0.0);
    //Instruction 2036
    //MUL
    t16_15 = t16_1 * t16_1;
    //Instruction 2037
    //ADD
    t16_17 = (-_Glossiness) + 1.0;
    //Instruction 2038
    //MUL
    t16_18 = t16_17 * t16_17;
    //Instruction 2039
    //ADD
    t16_17 = (-t16_17) + 1.0;
    //Instruction 2040
    //MAD
    t16_17 = t16_17 * 0.968000 + 0.030000;
    //Instruction 2041
    //LOG
    t16_17 = log2(t16_17);
    //Instruction 2042
    //DIV
    t16_17 = 10.000000 / t16_17;
    //Instruction 2043
    //MAD
    t16_15 = t16_15 * _Glossiness + t16_18;
    //Instruction 2044
    //MUL
    t16_15 = t16_15 * unity_LightGammaCorrectionConsts.z;
    //Instruction 2045
    //MAD
    t16_1 = t16_15 * t16_1 + 0.000100;
    //Instruction 2046
    //MAD
    t16_15 = t16_17 * t16_17 + 1.0;
    //Instruction 2047
    //MUL
    t16_17 = t16_17 * t16_17;
    //Instruction 2048
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2049
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 2050
    //MUL
    t16_4.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 2051
    //DP3
    t16_3.x = dot(t16_4.xyz, t16_3.xyz);
    //Instruction 2052
    //DP3
    t16_2.x = dot(t16_4.xyz, t16_2.xyz);
    //Instruction 2053
    //MAX
    t16_6 = max(t16_2.x, 0.0);
    //Instruction 2054
    //MAX
    t16_11 = max(t16_3.x, 0.0);
    //Instruction 2055
    //LOG
    t16_2.x = log2(t16_11);
    //Instruction 2056
    //MUL
    t16_2.x = t16_2.x * t16_17;
    //Instruction 2057
    //EXP
    t16_2.x = exp2(t16_2.x);
    //Instruction 2058
    //MUL
    t16_15 = t16_15 * t16_2.x;
    //Instruction 2059
    //DIV
    t16_1 = t16_15 / t16_1;
    //Instruction 2060
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2061
    //MAD
    t16_3.xyz = t10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2062
    //MUL
    t16_2 = t10_2.wxyz * _Color.wxyz;
    //Instruction 2063
    //MAD
    t16_3.xyz = vec3(_Metallic) * t16_3.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2064
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_3.xyz;
    //Instruction 2065
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2066
    //MAD
    t16_3.xyz = t16_2.yzw * vec3(t16_15) + t16_3.xyz;
    //Instruction 2067
    //MOV
    SV_Target0.w = t16_2.x;
    //Instruction 2068
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 2069
    //MUL
    SV_Target0.xyz = vec3(t16_6) * t16_0.xyz;
    //Instruction 2070
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "_ALPHABLEND_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "SHADOWCASTER"
  Tags { "LIGHTMODE"="SHADOWCASTER" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 133839
Program "vp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t6;
highp float t9;
void main()
{
    //Instruction 2137
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2138
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2139
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2140
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2141
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2142
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2143
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2144
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2145
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2146
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2147
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2148
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 2149
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2150
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 2151
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2152
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 2153
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 2154
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 2155
    //MAD
    t2.xyz = (-t1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2156
    //DP3
    t9 = dot(t2.xyz, t2.xyz);
    //Instruction 2157
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2158
    //MUL
    t2.xyz = vec3(t9) * t2.xyz;
    //Instruction 2159
    //DP3
    t9 = dot(t0.xyz, t2.xyz);
    //Instruction 2160
    //MAD
    t9 = (-t9) * t9 + 1.0;
    //Instruction 2161
    //SQRT
    t9 = sqrt(t9);
    //Instruction 2162
    //MUL
    t9 = t9 * unity_LightShadowBias.z;
    //Instruction 2163
    //MAD
    t0.xyz = (-t0.xyz) * vec3(t9) + t1.xyz;
    //Instruction 2164
    //MUL
    t1 = t0.yyyy * unity_MatrixVP[1];
    //Instruction 2165
    //MAD
    t1 = unity_MatrixVP[0] * t0.xxxx + t1;
    //Instruction 2166
    //MAD
    t0 = unity_MatrixVP[2] * t0.zzzz + t1;
    //Instruction 2167
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 2168
    //MUL
    t1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2169
    //MAD
    t1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t1;
    //Instruction 2170
    //MAD
    t1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t1;
    //Instruction 2171
    //ADD
    t1 = t1 + glstate_matrix_mvp[3];
    //Instruction 2172
    //NE
    tb2 = unity_LightShadowBias.z!=0.0;
    //Instruction 2173
    //MOVC
    t0 = (bool(tb2)) ? t0 : t1;
    //Instruction 2174
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 2175
    //ADD
    t6 = t0.z + t1.x;
    //Instruction 2176
    //MAX
    t1.x = max((-t0.w), t6);
    //Instruction 2177
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 2178
    //ADD
    t0.x = (-t6) + t1.x;
    //Instruction 2179
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t0.x + t6;
    //Instruction 2180
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    //Instruction 2135
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2136
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
void main()
{
    //Instruction 2128
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2129
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2130
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2131
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2132
    //ADD
    vs_TEXCOORD0.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2133
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2134
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2135
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2136
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2137
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 2119
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 2120
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2121
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 2122
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 2123
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 2124
    //FRC
    t0 = fract(t0);
    //Instruction 2125
    //MAD
    t0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 2126
    //MOV
    SV_Target0 = t0;
    //Instruction 2127
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t6;
highp float t9;
void main()
{
    //Instruction 2144
    //MAD
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2145
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2146
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2147
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2148
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2149
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2150
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2151
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2152
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2153
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2154
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2155
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2156
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 2157
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2158
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 2159
    //MUL
    t1.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2160
    //MAD
    t1.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t1.xyz;
    //Instruction 2161
    //MAD
    t1.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t1.xyz;
    //Instruction 2162
    //ADD
    t1.xyz = t1.xyz + _Object2World[3].xyz;
    //Instruction 2163
    //MAD
    t2.xyz = (-t1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2164
    //DP3
    t9 = dot(t2.xyz, t2.xyz);
    //Instruction 2165
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 2166
    //MUL
    t2.xyz = vec3(t9) * t2.xyz;
    //Instruction 2167
    //DP3
    t9 = dot(t0.xyz, t2.xyz);
    //Instruction 2168
    //MAD
    t9 = (-t9) * t9 + 1.0;
    //Instruction 2169
    //SQRT
    t9 = sqrt(t9);
    //Instruction 2170
    //MUL
    t9 = t9 * unity_LightShadowBias.z;
    //Instruction 2171
    //MAD
    t0.xyz = (-t0.xyz) * vec3(t9) + t1.xyz;
    //Instruction 2172
    //MUL
    t1 = t0.yyyy * unity_MatrixVP[1];
    //Instruction 2173
    //MAD
    t1 = unity_MatrixVP[0] * t0.xxxx + t1;
    //Instruction 2174
    //MAD
    t0 = unity_MatrixVP[2] * t0.zzzz + t1;
    //Instruction 2175
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 2176
    //MUL
    t1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2177
    //MAD
    t1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t1;
    //Instruction 2178
    //MAD
    t1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t1;
    //Instruction 2179
    //ADD
    t1 = t1 + glstate_matrix_mvp[3];
    //Instruction 2180
    //NE
    tb2 = unity_LightShadowBias.z!=0.0;
    //Instruction 2181
    //MOVC
    t0 = (bool(tb2)) ? t0 : t1;
    //Instruction 2182
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 2183
    //ADD
    t6 = t0.z + t1.x;
    //Instruction 2184
    //MAX
    t1.x = max((-t0.w), t6);
    //Instruction 2185
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 2186
    //ADD
    t0.x = (-t6) + t1.x;
    //Instruction 2187
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t0.x + t6;
    //Instruction 2188
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float t10_0;
bool tb0;
mediump float t16_1;
void main()
{
    //Instruction 2138
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 2139
    //MAD
    t16_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 2140
    //LT
    tb0 = t16_1<0.0;
    //Instruction 2141
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 2142
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2143
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
highp vec4 t0;
void main()
{
    //Instruction 2194
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2195
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2196
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2197
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2198
    //ADD
    vs_TEXCOORD0.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2199
    //MAD
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2200
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2201
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2202
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2203
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2204
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
highp vec4 t0;
lowp float t10_0;
bool tb0;
mediump float t16_1;
void main()
{
    //Instruction 2181
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 2182
    //MAD
    t16_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 2183
    //LT
    tb0 = t16_1<0.0;
    //Instruction 2184
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 2185
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 2186
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 2187
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 2188
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 2189
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 2190
    //FRC
    t0 = fract(t0);
    //Instruction 2191
    //MAD
    t0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 2192
    //MOV
    SV_Target0 = t0;
    //Instruction 2193
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "_ALPHABLEND_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" "PerformanceChecks"="False" }
  GpuProgramID 200435
Program "vp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2256
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2257
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2258
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2259
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2260
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2261
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2262
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2263
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2264
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2265
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2266
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2267
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2268
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2269
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2270
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2271
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2272
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2273
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2274
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2275
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2276
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2277
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2278
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2279
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2280
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2281
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2282
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2283
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2284
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2285
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2286
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2287
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2288
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 2289
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 2290
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 2291
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 2292
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 2293
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 2294
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 2295
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2296
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 2205
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2206
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 2207
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 2208
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2209
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 2210
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2211
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2212
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2213
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 2214
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2215
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2216
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 2217
    //MOV
    SV_Target0 = t16_0;
    //Instruction 2218
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 2219
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 2220
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2221
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2222
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 2223
    //MOV
    t16_2.w = 1.0;
    //Instruction 2224
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 2225
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 2226
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 2227
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 2228
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2229
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 2230
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2231
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2232
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 2233
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 2234
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 2235
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 2236
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 2237
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 2238
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 2239
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2240
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2241
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 2242
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 2243
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 2244
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 2245
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 2246
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 2247
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 2248
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 2249
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 2250
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 2251
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 2252
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 2253
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 2254
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 2255
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2240
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2241
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2242
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2243
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2244
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2245
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2246
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2247
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2248
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2249
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2250
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2251
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2252
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2253
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2254
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2255
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2256
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2257
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2258
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2259
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2260
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2261
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2262
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2263
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2264
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2265
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2266
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2267
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2268
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2269
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2270
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2271
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2272
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 2273
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 2274
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 2275
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 2276
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 2277
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 2278
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 2279
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2280
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 2189
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2190
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 2191
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 2192
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2193
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 2194
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2195
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2196
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2197
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 2198
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2199
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2200
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 2201
    //MOV
    SV_Target0 = t16_0;
    //Instruction 2202
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 2203
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 2204
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2205
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2206
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 2207
    //MOV
    t16_2.w = 1.0;
    //Instruction 2208
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 2209
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 2210
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 2211
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 2212
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2213
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 2214
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2215
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2216
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 2217
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 2218
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 2219
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 2220
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 2221
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 2222
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 2223
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2224
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2225
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 2226
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 2227
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 2228
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 2229
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 2230
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 2231
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 2232
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 2233
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 2234
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 2235
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 2236
    //MAD
    t16_1.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 2237
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 2238
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 2239
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2347
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2348
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2349
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2350
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2351
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2352
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2353
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2354
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2355
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2356
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2357
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2358
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2359
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2360
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2361
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2362
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2363
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2364
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2365
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2366
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2367
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2368
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2369
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2370
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2371
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2372
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2373
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2374
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2375
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2376
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2377
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2378
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2379
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 2380
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 2381
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 2382
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 2383
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 2384
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 2385
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 2386
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2387
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 2297
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2298
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 2299
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 2300
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2301
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 2302
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2303
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2304
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2305
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 2306
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2307
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2308
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 2309
    //MOV
    SV_Target0 = t16_0;
    //Instruction 2310
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 2311
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 2312
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2313
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2314
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 2315
    //MOV
    t16_2.w = 1.0;
    //Instruction 2316
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 2317
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 2318
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 2319
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 2320
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2321
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 2322
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2323
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2324
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 2325
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 2326
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 2327
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 2328
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 2329
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 2330
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 2331
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2332
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2333
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 2334
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 2335
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 2336
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 2337
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 2338
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 2339
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 2340
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 2341
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 2342
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 2343
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 2344
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 2345
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 2346
    //RET
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec3 t1;
mediump float t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2331
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2332
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2333
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2334
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2335
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2336
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2337
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2338
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2339
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2340
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2341
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2342
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2343
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2344
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 2345
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2346
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2347
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2348
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2349
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2350
    //MUL
    t1.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2351
    //MUL
    t1.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2352
    //MUL
    t1.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2353
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2354
    //MUL
    t1.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2355
    //MUL
    t1.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2356
    //MUL
    t1.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2357
    //ADD
    t0.xyz = t0.xyz + t1.xyz;
    //Instruction 2358
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2359
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2360
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2361
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2362
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2363
    //MUL
    t16_2 = t0.y * t0.y;
    //Instruction 2364
    //MAD
    t16_2 = t0.x * t0.x + (-t16_2);
    //Instruction 2365
    //MUL
    t16_0 = t0.yzzx * t0.xyzz;
    //Instruction 2366
    //DP4
    t16_3.x = dot(unity_SHBr, t16_0);
    //Instruction 2367
    //DP4
    t16_3.y = dot(unity_SHBg, t16_0);
    //Instruction 2368
    //DP4
    t16_3.z = dot(unity_SHBb, t16_0);
    //Instruction 2369
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_2) + t16_3.xyz;
    //Instruction 2370
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2371
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_22;
mediump float t16_24;
void main()
{
    //Instruction 2281
    //SAMPLE
    t10_0 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2282
    //ADD
    t16_1.x = (-_OcclusionStrength) + 1.0;
    //Instruction 2283
    //MAD
    t16_0.w = t10_0 * _OcclusionStrength + t16_1.x;
    //Instruction 2284
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2285
    //MUL
    t16_3.xyz = t10_2.xyz * _Color.xyz;
    //Instruction 2286
    //MAD
    t16_1.xyz = _Color.xyz * t10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2287
    //MAD
    t16_1.xyz = vec3(_Metallic) * t16_1.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2288
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2289
    //MUL
    t16_0.xyz = vec3(t16_22) * t16_3.xyz;
    //Instruction 2290
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2291
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2292
    //ADD
    t16_4.xyz = (-t16_1.xyz) + vec3(t16_22);
    //Instruction 2293
    //MOV
    SV_Target0 = t16_0;
    //Instruction 2294
    //MOV
    SV_Target1.xyz = t16_1.xyz;
    //Instruction 2295
    //MOV
    SV_Target1.w = _Glossiness;
    //Instruction 2296
    //DP3
    t16_22 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2297
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2298
    //MUL
    t16_2.xyz = vec3(t16_22) * vs_TEXCOORD4.xyz;
    //Instruction 2299
    //MOV
    t16_2.w = 1.0;
    //Instruction 2300
    //MAD
    SV_Target2 = t16_2 * vec4(0.500000, 0.500000, 0.500000, 1.0) + vec4(0.500000, 0.500000, 0.500000, 0.0);
    //Instruction 2301
    //DP4
    t16_5.x = dot(unity_SHAr, t16_2);
    //Instruction 2302
    //DP4
    t16_5.y = dot(unity_SHAg, t16_2);
    //Instruction 2303
    //DP4
    t16_5.z = dot(unity_SHAb, t16_2);
    //Instruction 2304
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 2305
    //MUL
    t16_5.xyz = t16_0.www * t16_5.xyz;
    //Instruction 2306
    //DP3
    t16_22 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    //Instruction 2307
    //RSQ
    t16_22 = inversesqrt(t16_22);
    //Instruction 2308
    //MUL
    t16_6.xyz = vec3(t16_22) * vs_TEXCOORD1.xyz;
    //Instruction 2309
    //DP3
    t16_3.x = dot(t16_6.xyz, t16_2.xyz);
    //Instruction 2310
    //ADD
    t16_3.x = t16_3.x + t16_3.x;
    //Instruction 2311
    //MAD
    t16_3.xyz = t16_2.xyz * (-t16_3.xxx) + t16_6.xyz;
    //Instruction 2312
    //DP3
    t16_22 = dot(t16_2.xyz, (-t16_6.xyz));
    //Instruction 2313
    //MAX
    t16_24 = max(t16_22, 0.0);
    //Instruction 2314
    //ADD
    t16_22 = (-t16_24) + 1.0;
    //Instruction 2315
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2316
    //MUL
    t16_22 = t16_22 * t16_22;
    //Instruction 2317
    //MAD
    t16_1.xyz = vec3(t16_22) * t16_4.xyz + t16_1.xyz;
    //Instruction 2318
    //ADD
    t16_22 = (-_Glossiness) + 1.0;
    //Instruction 2319
    //LOG
    t16_22 = log2(t16_22);
    //Instruction 2320
    //MUL
    t16_22 = t16_22 * 0.750000;
    //Instruction 2321
    //EXP
    t16_22 = exp2(t16_22);
    //Instruction 2322
    //MUL
    t16_22 = t16_22 * 7.000000;
    //Instruction 2323
    //SAMPLE_L
    t10_2 = textureLod(unity_SpecCube0, t16_3.xyz, t16_22);
    //Instruction 2324
    //MUL
    t16_22 = t10_2.w * unity_SpecCube0_HDR.x;
    //Instruction 2325
    //MUL
    t16_4.xyz = t10_2.xyz * vec3(t16_22);
    //Instruction 2326
    //MUL
    t16_4.xyz = t16_0.www * t16_4.xyz;
    //Instruction 2327
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 2328
    //MAD
    SV_Target3.xyz = t16_5.xyz * t16_0.xyz + t16_1.xyz;
    //Instruction 2329
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 2330
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "_ALPHABLEND_ON" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 150
 Tags { "RenderType"="Opaque" "PerformanceChecks"="False" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite [_ZWrite]
  Blend [_SrcBlend] [_DstBlend]
  GpuProgramID 374778
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2414
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2415
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2416
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2417
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2418
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2419
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2420
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2421
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2422
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2423
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2424
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2425
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2426
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2427
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 2428
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 2429
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 2430
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2431
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2432
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2433
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2434
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2435
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2436
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2437
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2438
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2439
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2440
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2441
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2442
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2443
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2444
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2445
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2446
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2447
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2448
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 2449
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 2450
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 2451
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 2452
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 2453
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 2454
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 2455
    //MOV
    t0.w = 1.0;
    //Instruction 2456
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 2457
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 2458
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 2459
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 2460
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2461
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2372
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2373
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2374
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2375
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 2376
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 2377
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2378
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2379
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 2380
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2381
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 2382
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 2383
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2384
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 2385
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 2386
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 2387
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2388
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 2389
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2390
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2391
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2392
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 2393
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 2394
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 2395
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 2396
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 2397
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 2398
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 2399
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2400
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 2401
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 2402
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2403
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 2404
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 2405
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 2406
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2407
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 2408
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 2409
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 2410
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 2411
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 2412
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2413
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * tmpvar_17.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_17.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_17.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_35.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_28);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = 1.0;
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 2504
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2505
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2506
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2507
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2508
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2509
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2510
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2511
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2512
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2513
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2514
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2515
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2516
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2517
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2518
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2519
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2520
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2521
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2522
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2523
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2524
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2525
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2526
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2527
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2528
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2529
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2530
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2531
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2532
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2533
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2534
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 2535
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 2536
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 2537
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2538
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 2539
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 2540
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 2541
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 2542
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 2543
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 2544
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 2545
    //MOV
    t1.w = 1.0;
    //Instruction 2546
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2547
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2548
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2549
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 2550
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 2551
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 2552
    //MUL
    t3 = t3 * t3;
    //Instruction 2553
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 2554
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 2555
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 2556
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 2557
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 2558
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 2559
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 2560
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 2561
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 2562
    //MUL
    t1 = t1 * t3;
    //Instruction 2563
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 2564
    //MUL
    t0 = t0 * t1;
    //Instruction 2565
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 2566
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 2567
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 2568
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 2569
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 2570
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 2571
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2572
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
mediump vec3 t16_10;
lowp vec3 t10_10;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2462
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2463
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2464
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2465
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 2466
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 2467
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2468
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2469
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 2470
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2471
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 2472
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 2473
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2474
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 2475
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 2476
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 2477
    //SAMPLE
    t10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2478
    //MUL
    t16_4.xyz = t10_10.xyz * _Color.xyz;
    //Instruction 2479
    //MAD
    t16_1.xyw = _Color.xyz * t10_10.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2480
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2481
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2482
    //MUL
    t16_9.xyz = t16_2.xxx * t16_4.xyz;
    //Instruction 2483
    //ADD
    t16_2.x = (-t16_2.x) + _Glossiness;
    //Instruction 2484
    //ADD
    t16_2.x = t16_2.x + 1.0;
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 2485
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_2.xxx;
    //Instruction 2486
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 2487
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_9.xyz;
    //Instruction 2488
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 2489
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2490
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 2491
    //MUL
    t16_2.xyz = t16_9.xyz * t16_6.xyz;
    //Instruction 2492
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2493
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 2494
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 2495
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 2496
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2497
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 2498
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 2499
    //MUL
    t16_2.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 2500
    //MUL
    t16_2.xyz = vec3(t10_3) * t16_2.xyz;
    //Instruction 2501
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 2502
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2503
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = 1.0;
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2619
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2620
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2621
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2622
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2623
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2624
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2625
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2626
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2627
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2628
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2629
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2630
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2631
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2632
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 2633
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 2634
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 2635
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2636
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2637
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2638
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2639
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2640
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2641
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2642
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2643
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2644
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2645
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2646
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2647
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2648
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2649
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2650
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2651
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2652
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2653
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 2654
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 2655
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 2656
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 2657
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 2658
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 2659
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 2660
    //MOV
    t0.w = 1.0;
    //Instruction 2661
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 2662
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 2663
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 2664
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 2665
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2666
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2667
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2668
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2669
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2670
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2671
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 2672
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 2673
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 2674
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2675
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2573
    //SAMPLE_C_LZ
    vec3 txVec5 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
    //Instruction 2574
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 2575
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 2576
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 2577
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2578
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2579
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 2580
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 2581
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 2582
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2583
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2584
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2585
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2586
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 2587
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 2588
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2589
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 2590
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 2591
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 2592
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2593
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 2594
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2595
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2596
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2597
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 2598
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2599
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2600
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 2601
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 2602
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 2603
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2604
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2605
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 2606
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 2607
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2608
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 2609
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 2610
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 2611
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2612
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 2613
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 2614
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 2615
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 2616
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 2617
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2618
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = 1.0;
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 2722
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2723
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2724
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2725
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2726
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2727
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2728
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2729
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2730
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2731
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2732
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2733
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2734
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2735
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2736
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2737
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2738
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2739
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2740
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2741
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2742
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2743
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2744
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2745
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2746
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2747
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2748
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2749
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2750
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2751
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2752
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 2753
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 2754
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 2755
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2756
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 2757
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 2758
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 2759
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 2760
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 2761
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 2762
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 2763
    //MOV
    t1.w = 1.0;
    //Instruction 2764
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2765
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2766
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2767
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 2768
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 2769
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 2770
    //MUL
    t3 = t3 * t3;
    //Instruction 2771
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 2772
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 2773
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 2774
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 2775
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 2776
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 2777
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 2778
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 2779
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 2780
    //MUL
    t1 = t1 * t3;
    //Instruction 2781
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 2782
    //MUL
    t0 = t0 * t1;
    //Instruction 2783
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 2784
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 2785
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 2786
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 2787
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 2788
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 2789
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2790
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2791
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2792
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2793
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2794
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2795
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 2796
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 2797
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 2798
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2799
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
lowp vec3 t10_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2676
    //SAMPLE_C_LZ
    vec3 txVec6 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
    //Instruction 2677
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 2678
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 2679
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 2680
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2681
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2682
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 2683
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 2684
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 2685
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2686
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2687
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2688
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2689
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 2690
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 2691
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2692
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 2693
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 2694
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 2695
    //SAMPLE
    t10_11.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2696
    //MUL
    t16_5.xyz = t10_11.xyz * _Color.xyz;
    //Instruction 2697
    //MAD
    t16_2.xyw = _Color.xyz * t10_11.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2698
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2699
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2700
    //MUL
    t16_3.xyz = vec3(t16_22) * t16_5.xyz;
    //Instruction 2701
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2702
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2703
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 2704
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 2705
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_3.xyz;
    //Instruction 2706
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2707
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2708
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 2709
    //MUL
    t16_2.xyz = t16_3.xyz * t16_2.xyz;
    //Instruction 2710
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2711
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 2712
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 2713
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 2714
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2715
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 2716
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 2717
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 2718
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 2719
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 2720
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2721
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = (tmpvar_3.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2430
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2431
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2432
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2433
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2434
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2435
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2436
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2437
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2438
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2439
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2440
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2441
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2442
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2443
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 2444
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 2445
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 2446
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2447
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2448
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2449
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2450
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2451
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2452
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2453
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2454
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2455
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2456
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2457
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2458
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2459
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2460
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2461
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2462
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2463
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2464
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 2465
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 2466
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 2467
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 2468
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 2469
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 2470
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 2471
    //MOV
    t0.w = 1.0;
    //Instruction 2472
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 2473
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 2474
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 2475
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 2476
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2477
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_10;
mediump vec3 t16_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2388
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2389
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2390
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2391
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 2392
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 2393
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2394
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2395
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 2396
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2397
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 2398
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 2399
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2400
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 2401
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 2402
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 2403
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2404
    //MAD
    t16_1.xyw = t10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2405
    //MUL
    t16_2 = t10_2.wxyz * _Color.wxyz;
    //Instruction 2406
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2407
    //MAD
    t16_4.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2408
    //MUL
    t16_11.xyz = vec3(t16_2.y * t16_4.x, t16_2.z * t16_4.x, t16_2.w * t16_4.x);
    //Instruction 2409
    //MOV
    SV_Target0.w = t16_2.x;
    //Instruction 2410
    //ADD
    t16_4.x = (-t16_4.x) + _Glossiness;
    //Instruction 2411
    //ADD
    t16_4.x = t16_4.x + 1.0;
    t16_4.x = clamp(t16_4.x, 0.0, 1.0);
    //Instruction 2412
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_4.xxx;
    //Instruction 2413
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 2414
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_11.xyz;
    //Instruction 2415
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 2416
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2417
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 2418
    //MUL
    t16_4.xyz = t16_11.xyz * t16_6.xyz;
    //Instruction 2419
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2420
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_4.xyz;
    //Instruction 2421
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 2422
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 2423
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2424
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 2425
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 2426
    //MUL
    t16_4.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 2427
    //MUL
    t16_4.xyz = vec3(t10_3) * t16_4.xyz;
    //Instruction 2428
    //MAD
    SV_Target0.xyz = t16_4.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 2429
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = (tmpvar_4.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_10;
  texcoord_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_11;
  if ((_UVSec == 0.0)) {
    tmpvar_11 = tmpvar_2;
  } else {
    tmpvar_11 = tmpvar_3;
  };
  texcoord_10.zw = ((tmpvar_11 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_12;
  n_12 = (tmpvar_9.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_13;
  norm_13 = tmpvar_1;
  highp vec4 v_14;
  v_14.x = _World2Object[0].x;
  v_14.y = _World2Object[1].x;
  v_14.z = _World2Object[2].x;
  v_14.w = _World2Object[3].x;
  highp vec4 v_15;
  v_15.x = _World2Object[0].y;
  v_15.y = _World2Object[1].y;
  v_15.z = _World2Object[2].y;
  v_15.w = _World2Object[3].y;
  highp vec4 v_16;
  v_16.x = _World2Object[0].z;
  v_16.y = _World2Object[1].z;
  v_16.z = _World2Object[2].z;
  v_16.w = _World2Object[3].z;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(((
    (v_14.xyz * norm_13.x)
   + 
    (v_15.xyz * norm_13.y)
  ) + (v_16.xyz * norm_13.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_17;
  mediump vec4 normal_19;
  normal_19 = tmpvar_18;
  mediump vec3 x2_20;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, normal_19);
  x1_21.y = dot (unity_SHAg, normal_19);
  x1_21.z = dot (unity_SHAb, normal_19);
  mediump vec4 tmpvar_22;
  tmpvar_22 = (normal_19.xyzz * normal_19.yzzx);
  x2_20.x = dot (unity_SHBr, tmpvar_22);
  x2_20.y = dot (unity_SHBg, tmpvar_22);
  x2_20.z = dot (unity_SHBb, tmpvar_22);
  tmpvar_8.xyz = ((x2_20 + (unity_SHC.xyz * 
    ((normal_19.x * normal_19.x) - (normal_19.y * normal_19.y))
  )) + x1_21);
  highp vec3 lightColor0_23;
  lightColor0_23 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_24;
  lightColor1_24 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_25;
  lightColor2_25 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_26;
  lightColor3_26 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_27;
  lightAttenSq_27 = unity_4LightAtten0;
  highp vec3 col_28;
  highp vec4 ndotl_29;
  highp vec4 lengthSq_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (unity_4LightPosX0 - tmpvar_9.x);
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosY0 - tmpvar_9.y);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosZ0 - tmpvar_9.z);
  lengthSq_30 = (tmpvar_31 * tmpvar_31);
  lengthSq_30 = (lengthSq_30 + (tmpvar_32 * tmpvar_32));
  lengthSq_30 = (lengthSq_30 + (tmpvar_33 * tmpvar_33));
  ndotl_29 = (tmpvar_31 * tmpvar_17.x);
  ndotl_29 = (ndotl_29 + (tmpvar_32 * tmpvar_17.y));
  ndotl_29 = (ndotl_29 + (tmpvar_33 * tmpvar_17.z));
  highp vec4 tmpvar_34;
  tmpvar_34 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_29 * inversesqrt(lengthSq_30)));
  ndotl_29 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (1.0/((1.0 + 
    (lengthSq_30 * lightAttenSq_27)
  ))));
  col_28 = (lightColor0_23 * tmpvar_35.x);
  col_28 = (col_28 + (lightColor1_24 * tmpvar_35.y));
  col_28 = (col_28 + (lightColor2_25 * tmpvar_35.z));
  col_28 = (col_28 + (lightColor3_26 * tmpvar_35.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_28);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_10;
  xlv_TEXCOORD1 = normalize(n_12);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 c_1;
  mediump vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_4;
  tmpvar_4 = (_Color.xyz * tmpvar_3.xyz);
  mediump vec3 tmpvar_5;
  mediump float oneMinusReflectivity_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_4, vec3(_Metallic));
  oneMinusReflectivity_6 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_5 = (tmpvar_4 * oneMinusReflectivity_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  mediump float tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_9 = tmpvar_10.y;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = -(xlv_TEXCOORD1);
  tmpvar_11 = tmpvar_13;
  tmpvar_12 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_14;
  mediump vec3 worldNormal_15;
  highp vec3 tmpvar_16;
  highp vec3 I_17;
  I_17 = -(tmpvar_11);
  tmpvar_16 = (I_17 - (2.0 * (
    dot (tmpvar_2, I_17)
   * tmpvar_2)));
  worldNormal_15 = tmpvar_16;
  mediump vec4 hdr_18;
  hdr_18 = tmpvar_12;
  highp float mip_19;
  mediump float tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (1.0 - _Glossiness);
  tmpvar_20 = (tmpvar_21 * 7.0);
  mip_19 = tmpvar_20;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = worldNormal_15;
  tmpvar_22.w = mip_19;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureCube (unity_SpecCube0, tmpvar_22.xyz, mip_19);
  mediump vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  tmpvar_14 = ((tmpvar_24.w * hdr_18.x) * tmpvar_24.xyz);
  tmpvar_14 = (tmpvar_14 * tmpvar_9);
  mediump vec2 tmpvar_25;
  tmpvar_25.x = dot ((tmpvar_13 - (2.0 * 
    (dot (tmpvar_2, tmpvar_13) * tmpvar_2)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_25.y = (1.0 - clamp (dot (tmpvar_2, tmpvar_13), 0.0, 1.0));
  mediump vec2 tmpvar_26;
  tmpvar_26 = ((tmpvar_25 * tmpvar_25) * (tmpvar_25 * tmpvar_25));
  mediump vec2 tmpvar_27;
  tmpvar_27.x = tmpvar_26.x;
  tmpvar_27.y = tmpvar_21;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (unity_NHxRoughness, tmpvar_27);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((
    ((tmpvar_5 + ((tmpvar_28.w * 16.0) * tmpvar_7)) * tmpvar_8)
   * 
    clamp (dot (tmpvar_2, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_9)
   * tmpvar_5)) + (tmpvar_14 * mix (tmpvar_7, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_6)), 0.0, 1.0)
  ), tmpvar_26.yyy)));
  mediump vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_29;
  c_1.w = tmpvar_30.w;
  c_1.xyz = tmpvar_29;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_31;
  xlat_varoutput_31.xyz = c_1.xyz;
  xlat_varoutput_31.w = (tmpvar_3.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_31;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 2520
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2521
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2522
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2523
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2524
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2525
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2526
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2527
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2528
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2529
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2530
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2531
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2532
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2533
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2534
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2535
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2536
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2537
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2538
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2539
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2540
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2541
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2542
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2543
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2544
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2545
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2546
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2547
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2548
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2549
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2550
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 2551
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 2552
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 2553
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2554
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 2555
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 2556
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 2557
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 2558
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 2559
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 2560
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 2561
    //MOV
    t1.w = 1.0;
    //Instruction 2562
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2563
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2564
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2565
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 2566
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 2567
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 2568
    //MUL
    t3 = t3 * t3;
    //Instruction 2569
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 2570
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 2571
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 2572
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 2573
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 2574
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 2575
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 2576
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 2577
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 2578
    //MUL
    t1 = t1 * t3;
    //Instruction 2579
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 2580
    //MUL
    t0 = t0 * t1;
    //Instruction 2581
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 2582
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 2583
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 2584
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 2585
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 2586
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 2587
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2588
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec4 t10_0;
mediump vec4 t16_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump vec3 t16_10;
mediump vec3 t16_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2478
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2479
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2480
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2481
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 2482
    //ADD
    t16_1.x = t16_21 + t16_21;
    //Instruction 2483
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2484
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2485
    //MAD
    t16_1.xyz = t16_0.xyz * (-t16_1.xxx) + (-vs_TEXCOORD1.xyz);
    //Instruction 2486
    //DP3
    t16_2.x = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2487
    //MUL
    t16_1.xy = t16_2.xy * t16_2.xy;
    //Instruction 2488
    //MUL
    t16_1.yz = t16_1.xy * t16_1.xy;
    //Instruction 2489
    //ADD
    t16_1.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2490
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.yw).w;
    //Instruction 2491
    //MUL
    t16_21 = t16_1.x * 7.000000;
    //Instruction 2492
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 2493
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2494
    //MAD
    t16_1.xyw = t10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2495
    //MUL
    t16_2 = t10_2.wxyz * _Color.wxyz;
    //Instruction 2496
    //MAD
    t16_1.xyw = vec3(_Metallic) * t16_1.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2497
    //MAD
    t16_4.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2498
    //MUL
    t16_11.xyz = vec3(t16_2.y * t16_4.x, t16_2.z * t16_4.x, t16_2.w * t16_4.x);
    //Instruction 2499
    //MOV
    SV_Target0.w = t16_2.x;
    //Instruction 2500
    //ADD
    t16_4.x = (-t16_4.x) + _Glossiness;
    //Instruction 2501
    //ADD
    t16_4.x = t16_4.x + 1.0;
    t16_4.x = clamp(t16_4.x, 0.0, 1.0);
    //Instruction 2502
    //ADD
    t16_5.xyz = (-t16_1.xyw) + t16_4.xxx;
    //Instruction 2503
    //MAD
    t16_5.xyz = t16_1.zzz * t16_5.xyz + t16_1.xyw;
    //Instruction 2504
    //MAD
    t16_1.xyz = vec3(t16_3) * t16_1.xyw + t16_11.xyz;
    //Instruction 2505
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 2506
    //SAMPLE
    t10_3 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2507
    //MUL
    t16_6.xyz = vec3(t10_3) * vs_TEXCOORD5.xyz;
    //Instruction 2508
    //MUL
    t16_4.xyz = t16_11.xyz * t16_6.xyz;
    //Instruction 2509
    //DP3
    t16_22 = dot(t16_0.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2510
    //MAD
    t16_1.xyz = t16_1.xyz * vec3(t16_22) + t16_4.xyz;
    //Instruction 2511
    //DP3
    t16_10.x = dot(vs_TEXCOORD1.xyz, t16_0.xyz);
    //Instruction 2512
    //ADD
    t16_10.x = t16_10.x + t16_10.x;
    //Instruction 2513
    //MAD
    t16_10.xyz = t16_0.xyz * (-t16_10.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2514
    //SAMPLE_L
    t10_0 = textureLod(unity_SpecCube0, t16_10.xyz, t16_21);
    //Instruction 2515
    //MUL
    t16_22 = t10_0.w * unity_SpecCube0_HDR.x;
    //Instruction 2516
    //MUL
    t16_4.xyz = t10_0.xyz * vec3(t16_22);
    //Instruction 2517
    //MUL
    t16_4.xyz = vec3(t10_3) * t16_4.xyz;
    //Instruction 2518
    //MAD
    SV_Target0.xyz = t16_4.xyz * t16_5.xyz + t16_1.xyz;
    //Instruction 2519
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_10 = tmpvar_11;
  atten_2 = tmpvar_10;
  mediump float tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_12 = tmpvar_13.y;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = -(xlv_TEXCOORD1);
  tmpvar_14 = tmpvar_16;
  tmpvar_15 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_17;
  mediump vec3 worldNormal_18;
  highp vec3 tmpvar_19;
  highp vec3 I_20;
  I_20 = -(tmpvar_14);
  tmpvar_19 = (I_20 - (2.0 * (
    dot (tmpvar_3, I_20)
   * tmpvar_3)));
  worldNormal_18 = tmpvar_19;
  mediump vec4 hdr_21;
  hdr_21 = tmpvar_15;
  highp float mip_22;
  mediump float tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = (1.0 - _Glossiness);
  tmpvar_23 = (tmpvar_24 * 7.0);
  mip_22 = tmpvar_23;
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = worldNormal_18;
  tmpvar_25.w = mip_22;
  lowp vec4 tmpvar_26;
  tmpvar_26 = textureCube (unity_SpecCube0, tmpvar_25.xyz, mip_22);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  tmpvar_17 = ((tmpvar_27.w * hdr_21.x) * tmpvar_27.xyz);
  tmpvar_17 = (tmpvar_17 * tmpvar_12);
  mediump vec2 tmpvar_28;
  tmpvar_28.x = dot ((tmpvar_16 - (2.0 * 
    (dot (tmpvar_3, tmpvar_16) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_28.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_16), 0.0, 1.0));
  mediump vec2 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * tmpvar_28) * (tmpvar_28 * tmpvar_28));
  mediump vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = tmpvar_24;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2D (unity_NHxRoughness, tmpvar_30);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (((
    ((tmpvar_6 + ((tmpvar_31.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_12)
   * tmpvar_6)) + (tmpvar_17 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_29.yyy)));
  mediump vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = tmpvar_32;
  c_1.w = tmpvar_33.w;
  c_1.xyz = tmpvar_32;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_34;
  xlat_varoutput_34.xyz = c_1.xyz;
  xlat_varoutput_34.w = (tmpvar_4.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_34;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = (tmpvar_4.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_1;
highp vec3 t2;
mediump vec4 t16_2;
mediump vec3 t16_3;
highp float t12;
void main()
{
    //Instruction 2846
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2847
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2848
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2849
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2850
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2851
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2852
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2853
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2854
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2855
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2856
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2857
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2858
    //ADD
    t0.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2859
    //DP3
    t16_1.x = dot(t0.xyz, t0.xyz);
    //Instruction 2860
    //RSQ
    t16_1.x = inversesqrt(t16_1.x);
    //Instruction 2861
    //MUL
    vs_TEXCOORD1.xyz = t0.xyz * t16_1.xxx;
    //Instruction 2862
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2863
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2864
    //MUL
    t0.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2865
    //MUL
    t0.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2866
    //MUL
    t0.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2867
    //MUL
    t2.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2868
    //MUL
    t2.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2869
    //MUL
    t2.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2870
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2871
    //MUL
    t2.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2872
    //MUL
    t2.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2873
    //MUL
    t2.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2874
    //ADD
    t0.xyz = t0.xyz + t2.xyz;
    //Instruction 2875
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 2876
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 2877
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 2878
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 2879
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2880
    //MUL
    t16_1.x = t0.y * t0.y;
    //Instruction 2881
    //MAD
    t16_1.x = t0.x * t0.x + (-t16_1.x);
    //Instruction 2882
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 2883
    //DP4
    t16_3.x = dot(unity_SHBr, t16_2);
    //Instruction 2884
    //DP4
    t16_3.y = dot(unity_SHBg, t16_2);
    //Instruction 2885
    //DP4
    t16_3.z = dot(unity_SHBb, t16_2);
    //Instruction 2886
    //MAD
    t16_1.xyz = unity_SHC.xyz * t16_1.xxx + t16_3.xyz;
    //Instruction 2887
    //MOV
    t0.w = 1.0;
    //Instruction 2888
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 2889
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 2890
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 2891
    //ADD
    vs_TEXCOORD5.xyz = t16_1.xyz + t16_3.xyz;
    //Instruction 2892
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 2893
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2894
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 2895
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 2896
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 2897
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 2898
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 2899
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 2900
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 2901
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2902
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2800
    //SAMPLE_C_LZ
    vec3 txVec7 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
    //Instruction 2801
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 2802
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 2803
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 2804
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2805
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2806
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 2807
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 2808
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 2809
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2810
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2811
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2812
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2813
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 2814
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 2815
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2816
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 2817
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 2818
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 2819
    //SAMPLE
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2820
    //MAD
    t16_2.xyw = t10_3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2821
    //MUL
    t16_3 = t10_3.wxyz * _Color.wxyz;
    //Instruction 2822
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2823
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2824
    //MUL
    t16_5.xyz = vec3(float(t16_22) * t16_3.y, float(t16_22) * t16_3.z, float(t16_22) * t16_3.w);
    //Instruction 2825
    //MOV
    SV_Target0.w = t16_3.x;
    //Instruction 2826
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2827
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2828
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 2829
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 2830
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_5.xyz;
    //Instruction 2831
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2832
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2833
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 2834
    //MUL
    t16_2.xyz = t16_5.xyz * t16_2.xyz;
    //Instruction 2835
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2836
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 2837
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 2838
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 2839
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2840
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 2841
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 2842
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 2843
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 2844
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 2845
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  tmpvar_5.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_6.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_7.xyz = tmpvar_18;
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_18;
  mediump vec4 normal_20;
  normal_20 = tmpvar_19;
  mediump vec3 x2_21;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, normal_20);
  x1_22.y = dot (unity_SHAg, normal_20);
  x1_22.z = dot (unity_SHAb, normal_20);
  mediump vec4 tmpvar_23;
  tmpvar_23 = (normal_20.xyzz * normal_20.yzzx);
  x2_21.x = dot (unity_SHBr, tmpvar_23);
  x2_21.y = dot (unity_SHBg, tmpvar_23);
  x2_21.z = dot (unity_SHBb, tmpvar_23);
  tmpvar_8.xyz = ((x2_21 + (unity_SHC.xyz * 
    ((normal_20.x * normal_20.x) - (normal_20.y * normal_20.y))
  )) + x1_22);
  highp vec3 lightColor0_24;
  lightColor0_24 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_25;
  lightColor1_25 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_26;
  lightColor2_26 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_27;
  lightColor3_27 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_28;
  lightAttenSq_28 = unity_4LightAtten0;
  highp vec3 col_29;
  highp vec4 ndotl_30;
  highp vec4 lengthSq_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_10.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_10.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_10.z);
  lengthSq_31 = (tmpvar_32 * tmpvar_32);
  lengthSq_31 = (lengthSq_31 + (tmpvar_33 * tmpvar_33));
  lengthSq_31 = (lengthSq_31 + (tmpvar_34 * tmpvar_34));
  ndotl_30 = (tmpvar_32 * tmpvar_18.x);
  ndotl_30 = (ndotl_30 + (tmpvar_33 * tmpvar_18.y));
  ndotl_30 = (ndotl_30 + (tmpvar_34 * tmpvar_18.z));
  highp vec4 tmpvar_35;
  tmpvar_35 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_30 * inversesqrt(lengthSq_31)));
  ndotl_30 = tmpvar_35;
  highp vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * (1.0/((1.0 + 
    (lengthSq_31 * lightAttenSq_28)
  ))));
  col_29 = (lightColor0_24 * tmpvar_36.x);
  col_29 = (col_29 + (lightColor1_25 * tmpvar_36.y));
  col_29 = (col_29 + (lightColor2_26 * tmpvar_36.z));
  col_29 = (col_29 + (lightColor3_27 * tmpvar_36.w));
  tmpvar_8.xyz = (tmpvar_8.xyz + col_29);
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD2_1 = tmpvar_6;
  xlv_TEXCOORD2_2 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp samplerCube unity_SpecCube0;
uniform mediump vec4 unity_SpecCube0_HDR;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _OcclusionMap;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 c_1;
  mediump float atten_2;
  mediump vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_5;
  tmpvar_5 = (_Color.xyz * tmpvar_4.xyz);
  mediump vec3 tmpvar_6;
  mediump float oneMinusReflectivity_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_5, vec3(_Metallic));
  oneMinusReflectivity_7 = (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w));
  tmpvar_6 = (tmpvar_5 * oneMinusReflectivity_7);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  lowp float shadow_10;
  shadow_10 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  atten_2 = shadow_10;
  mediump float tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_OcclusionMap, xlv_TEXCOORD0.xy);
  tmpvar_11 = tmpvar_12.y;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = -(xlv_TEXCOORD1);
  tmpvar_13 = tmpvar_15;
  tmpvar_14 = unity_SpecCube0_HDR;
  mediump vec3 tmpvar_16;
  mediump vec3 worldNormal_17;
  highp vec3 tmpvar_18;
  highp vec3 I_19;
  I_19 = -(tmpvar_13);
  tmpvar_18 = (I_19 - (2.0 * (
    dot (tmpvar_3, I_19)
   * tmpvar_3)));
  worldNormal_17 = tmpvar_18;
  mediump vec4 hdr_20;
  hdr_20 = tmpvar_14;
  highp float mip_21;
  mediump float tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = (1.0 - _Glossiness);
  tmpvar_22 = (tmpvar_23 * 7.0);
  mip_21 = tmpvar_22;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = worldNormal_17;
  tmpvar_24.w = mip_21;
  lowp vec4 tmpvar_25;
  tmpvar_25 = textureCube (unity_SpecCube0, tmpvar_24.xyz, mip_21);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  tmpvar_16 = ((tmpvar_26.w * hdr_20.x) * tmpvar_26.xyz);
  tmpvar_16 = (tmpvar_16 * tmpvar_11);
  mediump vec2 tmpvar_27;
  tmpvar_27.x = dot ((tmpvar_15 - (2.0 * 
    (dot (tmpvar_3, tmpvar_15) * tmpvar_3)
  )), _WorldSpaceLightPos0.xyz);
  tmpvar_27.y = (1.0 - clamp (dot (tmpvar_3, tmpvar_15), 0.0, 1.0));
  mediump vec2 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (tmpvar_27 * tmpvar_27));
  mediump vec2 tmpvar_29;
  tmpvar_29.x = tmpvar_28.x;
  tmpvar_29.y = tmpvar_23;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (unity_NHxRoughness, tmpvar_29);
  mediump vec3 tmpvar_31;
  tmpvar_31 = (((
    ((tmpvar_6 + ((tmpvar_30.w * 16.0) * tmpvar_8)) * (tmpvar_9 * atten_2))
   * 
    clamp (dot (tmpvar_3, _WorldSpaceLightPos0.xyz), 0.0, 1.0)
  ) + (
    (xlv_TEXCOORD5.xyz * tmpvar_11)
   * tmpvar_6)) + (tmpvar_16 * mix (tmpvar_8, vec3(
    clamp ((_Glossiness + (1.0 - oneMinusReflectivity_7)), 0.0, 1.0)
  ), tmpvar_28.yyy)));
  mediump vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = tmpvar_31;
  c_1.w = tmpvar_32.w;
  c_1.xyz = tmpvar_31;
  c_1.xyz = c_1.xyz;
  mediump vec4 xlat_varoutput_33;
  xlat_varoutput_33.xyz = c_1.xyz;
  xlat_varoutput_33.w = (tmpvar_4.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_33;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec4 t4;
mediump vec3 t16_4;
highp vec4 t5;
highp float t18;
void main()
{
    //Instruction 2949
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2950
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2951
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2952
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2953
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2954
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2955
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2956
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2957
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2958
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2959
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2960
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2961
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2962
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2963
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2964
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2965
    //MOV
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2966
    //MOV
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 2967
    //MOV
    vs_TEXCOORD4.w = 0.0;
    //Instruction 2968
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2969
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2970
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2971
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2972
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2973
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2974
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2975
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2976
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2977
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2978
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2979
    //DP3
    t18 = dot(t1.xyz, t1.xyz);
    //Instruction 2980
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 2981
    //MUL
    t1.xyz = vec3(t18) * t1.xyz;
    //Instruction 2982
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2983
    //MUL
    t16_2.x = t1.y * t1.y;
    //Instruction 2984
    //MAD
    t16_2.x = t1.x * t1.x + (-t16_2.x);
    //Instruction 2985
    //MUL
    t16_3 = t1.yzzx * t1.xyzz;
    //Instruction 2986
    //DP4
    t16_4.x = dot(unity_SHBr, t16_3);
    //Instruction 2987
    //DP4
    t16_4.y = dot(unity_SHBg, t16_3);
    //Instruction 2988
    //DP4
    t16_4.z = dot(unity_SHBb, t16_3);
    //Instruction 2989
    //MAD
    t16_2.xyz = unity_SHC.xyz * t16_2.xxx + t16_4.xyz;
    //Instruction 2990
    //MOV
    t1.w = 1.0;
    //Instruction 2991
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 2992
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 2993
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 2994
    //ADD
    t16_2.xyz = t16_2.xyz + t16_4.xyz;
    //Instruction 2995
    //ADD
    t3 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 2996
    //MUL
    t4 = t1.yyyy * t3;
    //Instruction 2997
    //MUL
    t3 = t3 * t3;
    //Instruction 2998
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 2999
    //ADD
    t0 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 3000
    //MAD
    t4 = t5 * t1.xxxx + t4;
    //Instruction 3001
    //MAD
    t1 = t0 * t1.zzzz + t4;
    //Instruction 3002
    //MAD
    t3 = t5 * t5 + t3;
    //Instruction 3003
    //MAD
    t0 = t0 * t0 + t3;
    //Instruction 3004
    //RSQ
    t3 = inversesqrt(t0);
    //Instruction 3005
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 3006
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 3007
    //MUL
    t1 = t1 * t3;
    //Instruction 3008
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 3009
    //MUL
    t0 = t0 * t1;
    //Instruction 3010
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 3011
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 3012
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 3013
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 3014
    //ADD
    t0.xyz = t0.xyz + t16_2.xyz;
    //Instruction 3015
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 3016
    //MOV
    vs_TEXCOORD5.w = 0.0;
    //Instruction 3017
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3018
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3019
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3020
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3021
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3022
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3023
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3024
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3025
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3026
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _OcclusionMap;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp samplerCube unity_SpecCube0;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp vec4 t10_1;
mediump vec4 t16_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump float t16_4;
lowp float t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_7;
mediump vec3 t16_11;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 2903
    //SAMPLE_C_LZ
    vec3 txVec8 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
    //Instruction 2904
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 2905
    //MAD
    t16_0.x = t16_0.x * t16_7 + _LightShadowData.x;
    //Instruction 2906
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 2907
    //DP3
    t16_21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2908
    //RSQ
    t16_21 = inversesqrt(t16_21);
    //Instruction 2909
    //MUL
    t16_1.xyz = vec3(t16_21) * vs_TEXCOORD4.xyz;
    //Instruction 2910
    //DP3
    t16_21 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 2911
    //ADD
    t16_22 = t16_21 + t16_21;
    //Instruction 2912
    //MOV
    t16_21 = t16_21;
    t16_21 = clamp(t16_21, 0.0, 1.0);
    //Instruction 2913
    //ADD
    t16_2.y = (-t16_21) + 1.0;
    //Instruction 2914
    //MAD
    t16_3.xyz = t16_1.xyz * (-vec3(t16_22)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2915
    //DP3
    t16_2.x = dot(t16_3.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 2916
    //MUL
    t16_2.xy = t16_2.xy * t16_2.xy;
    //Instruction 2917
    //MUL
    t16_2.yz = t16_2.xy * t16_2.xy;
    //Instruction 2918
    //ADD
    t16_2.xw = (-vec2(_Glossiness)) + vec2(1.0, 1.0);
    //Instruction 2919
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.yw).w;
    //Instruction 2920
    //MUL
    t16_21 = t16_2.x * 7.000000;
    //Instruction 2921
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 2922
    //SAMPLE
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2923
    //MAD
    t16_2.xyw = t10_3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2924
    //MUL
    t16_3 = t10_3.wxyz * _Color.wxyz;
    //Instruction 2925
    //MAD
    t16_2.xyw = vec3(_Metallic) * t16_2.xyw + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2926
    //MAD
    t16_22 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2927
    //MUL
    t16_5.xyz = vec3(float(t16_22) * t16_3.y, float(t16_22) * t16_3.z, float(t16_22) * t16_3.w);
    //Instruction 2928
    //MOV
    SV_Target0.w = t16_3.x;
    //Instruction 2929
    //ADD
    t16_22 = (-t16_22) + _Glossiness;
    //Instruction 2930
    //ADD
    t16_22 = t16_22 + 1.0;
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2931
    //ADD
    t16_6.xyz = (-t16_2.xyw) + vec3(t16_22);
    //Instruction 2932
    //MAD
    t16_6.xyz = t16_2.zzz * t16_6.xyz + t16_2.xyw;
    //Instruction 2933
    //MAD
    t16_2.xyz = vec3(t16_4) * t16_2.xyw + t16_5.xyz;
    //Instruction 2934
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 2935
    //SAMPLE
    t10_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;
    //Instruction 2936
    //MUL
    t16_2.xyz = vec3(t10_4) * vs_TEXCOORD5.xyz;
    //Instruction 2937
    //MUL
    t16_2.xyz = t16_5.xyz * t16_2.xyz;
    //Instruction 2938
    //DP3
    t16_22 = dot(t16_1.xyz, _WorldSpaceLightPos0.xyz);
    t16_22 = clamp(t16_22, 0.0, 1.0);
    //Instruction 2939
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_22) + t16_2.xyz;
    //Instruction 2940
    //DP3
    t16_11.x = dot(vs_TEXCOORD1.xyz, t16_1.xyz);
    //Instruction 2941
    //ADD
    t16_11.x = t16_11.x + t16_11.x;
    //Instruction 2942
    //MAD
    t16_11.xyz = t16_1.xyz * (-t16_11.xxx) + vs_TEXCOORD1.xyz;
    //Instruction 2943
    //SAMPLE_L
    t10_1 = textureLod(unity_SpecCube0, t16_11.xyz, t16_21);
    //Instruction 2944
    //MUL
    t16_21 = t10_1.w * unity_SpecCube0_HDR.x;
    //Instruction 2945
    //MUL
    t16_2.xyz = t10_1.xyz * vec3(t16_21);
    //Instruction 2946
    //MUL
    t16_2.xyz = vec3(t10_4) * t16_2.xyz;
    //Instruction 2947
    //MAD
    SV_Target0.xyz = t16_2.xyz * t16_6.xyz + t16_0.xyz;
    //Instruction 2948
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "_ALPHABLEND_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "PerformanceChecks"="False" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend [_SrcBlend] One
  GpuProgramID 456985
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, vec2(tmpvar_5));
  mediump float atten_7;
  atten_7 = tmpvar_6.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3057
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3058
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3059
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3060
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3061
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3062
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3063
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3064
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3065
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3066
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3067
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3068
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3069
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3070
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3071
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3072
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3073
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3074
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3075
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3076
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3077
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3078
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3079
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3080
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3081
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3082
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3083
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3084
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3085
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3086
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3087
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3088
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3089
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3090
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3091
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3092
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3093
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3094
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3095
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3096
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3097
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3098
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3099
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3100
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3101
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3102
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3103
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3104
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3105
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3106
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3107
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3108
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3109
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3110
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3111
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3112
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3113
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3114
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3115
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3116
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3117
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3118
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3119
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3120
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3121
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3122
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3123
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3124
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t3;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 3027
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3028
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 3029
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 3030
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 3031
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 3032
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3033
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3034
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3035
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3036
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3037
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 3038
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 3039
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 3040
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 3041
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 3042
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 3043
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3044
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3045
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 3046
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3047
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 3048
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3049
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 3050
    //DP3
    t3 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3051
    //SAMPLE
    t10_3 = texture(_LightTexture0, vec2(t3)).w;
    //Instruction 3052
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 3053
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 3054
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 3055
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3056
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _LightColor0.xyz;
  mediump vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  mediump vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_NHxRoughness, tmpvar_8);
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_9.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_5) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_11;
  xlat_varoutput_11.xyz = tmpvar_10.xyz;
  xlat_varoutput_11.w = 1.0;
  gl_FragData[0] = xlat_varoutput_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 2616
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2617
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2618
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2619
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2620
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2621
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2622
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2623
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2624
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2625
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2626
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2627
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2628
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2629
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2630
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 2631
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 2632
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 2633
    //MOV
    t1.w = t0.x;
    //Instruction 2634
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2635
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 2636
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 2637
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2638
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2639
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 2640
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2641
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2642
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2643
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2644
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2645
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2646
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2647
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 2648
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2649
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2650
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2651
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 2652
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2653
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2654
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 2655
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 2656
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 2657
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 2658
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2659
    //MOV
    t2.w = t0.z;
    //Instruction 2660
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2661
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 2589
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2590
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2591
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2592
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 2593
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 2594
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2595
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2596
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2597
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2598
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 2599
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 2600
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 2601
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 2602
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 2603
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 2604
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 2605
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2606
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2607
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 2608
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2609
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 2610
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2611
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 2612
    //MUL
    t16_4.xyz = t16_4.xyz * _LightColor0.xyz;
    //Instruction 2613
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 2614
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2615
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_6 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].x;
  v_30.y = tangentToWorld_6[1].x;
  v_30.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].y;
  v_31.y = tangentToWorld_6[1].y;
  v_31.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].z;
  v_32.y = tangentToWorld_6[1].z;
  v_32.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_32;
  tmpvar_11 = (_LightMatrix0 * (_Object2World * _glesVertex));
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_34;
  n_34 = tmpvar_33;
  mediump vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  lightDir_5 = tmpvar_35;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp vec3 LightCoord_7;
  LightCoord_7 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_8;
  tmpvar_8 = dot (LightCoord_7, LightCoord_7);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTextureB0, vec2(tmpvar_8));
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * tmpvar_5.w) * tmpvar_9.w));
  mediump vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_1, viewDir_11) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_1, viewDir_11), 0.0, 1.0));
  mediump vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_NHxRoughness, tmpvar_13);
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_14.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_10) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = 1.0;
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2699
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2700
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2701
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2702
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2703
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2704
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2705
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2706
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2707
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2708
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2709
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2710
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2711
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2712
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2713
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2714
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2715
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2716
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 2717
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2718
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 2719
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 2720
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2721
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 2722
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 2723
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2724
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2725
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2726
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 2727
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2728
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2729
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2730
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2731
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2732
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2733
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2734
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2735
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2736
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2737
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2738
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2739
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2740
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2741
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 2742
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 2743
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2744
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2745
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 2746
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 2747
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2748
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2749
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2750
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2751
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2752
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2753
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2754
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2755
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 2756
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 2757
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 2758
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 2759
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 2760
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 2761
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 2762
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 2763
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 2764
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 2765
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 2766
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 2767
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 2768
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 2769
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 2770
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 2771
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 2772
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 2662
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 2663
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 2664
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 2665
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 2666
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 2667
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 2668
    //DP3
    t16_1 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2669
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 2670
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 2671
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 2672
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2673
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 2674
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 2675
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 2676
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 2677
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2678
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 2679
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 2680
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 2681
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 2682
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 2683
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 2684
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 2685
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 2686
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 2687
    //MUL
    t16_1 = t10_1 * 16.000000;
    //Instruction 2688
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2689
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2690
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 2691
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2692
    //MUL
    t16_9.xyz = vec3(t16_1) * t16_9.xyz;
    //Instruction 2693
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2694
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 2695
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 2696
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 2697
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2698
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTextureB0, vec2(tmpvar_5));
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_8;
  atten_8 = (tmpvar_6.w * tmpvar_7.w);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3157
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3158
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3159
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3160
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3161
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3162
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3163
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3164
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3165
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3166
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3167
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3168
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3169
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3170
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3171
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3172
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3173
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3174
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3175
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3176
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3177
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3178
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3179
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3180
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3181
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3182
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3183
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3184
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3185
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3186
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3187
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3188
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3189
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3190
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3191
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3192
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3193
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3194
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3195
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3196
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3197
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3198
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3199
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3200
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3201
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3202
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3203
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3204
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3205
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3206
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3207
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3208
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3209
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3210
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3211
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3212
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3213
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3214
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3215
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3216
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3217
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3218
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3219
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3220
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3221
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3222
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3223
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3224
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
lowp vec3 t10_5;
mediump vec3 t16_7;
mediump float t16_16;
void main()
{
    //Instruction 3125
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3126
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 3127
    //SAMPLE
    t10_5.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3128
    //MUL
    t16_0 = t10_5.x * t10_0;
    //Instruction 3129
    //MUL
    t16_1.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 3130
    //DP3
    t16_16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3131
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3132
    //MUL
    t16_2.xyz = vec3(t16_16) * vs_TEXCOORD4.xyz;
    //Instruction 3133
    //DP3
    t16_16 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 3134
    //ADD
    t16_16 = t16_16 + t16_16;
    //Instruction 3135
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_16)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3136
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 3137
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 3138
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 3139
    //DP3
    t16_16 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 3140
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 3141
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 3142
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 3143
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 3144
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 3145
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 3146
    //SAMPLE
    t10_5.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3147
    //MAD
    t16_7.xyz = _Color.xyz * t10_5.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3148
    //MUL
    t16_5.xyz = t10_5.xyz * _Color.xyz;
    //Instruction 3149
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3150
    //MUL
    t16_7.xyz = vec3(t16_0) * t16_7.xyz;
    //Instruction 3151
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3152
    //MAD
    t16_7.xyz = t16_5.xyz * vec3(t16_16) + t16_7.xyz;
    //Instruction 3153
    //MUL
    t16_1.xyz = t16_1.xyz * t16_7.xyz;
    //Instruction 3154
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_1.xyz;
    //Instruction 3155
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3156
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_6;
  atten_6 = tmpvar_5.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 3254
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3255
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3256
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3257
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3258
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3259
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3260
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3261
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3262
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3263
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3264
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3265
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3266
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3267
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3268
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 3269
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 3270
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 3271
    //MOV
    t1.w = t0.x;
    //Instruction 3272
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3273
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3274
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3275
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3276
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3277
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 3278
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3279
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3280
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3281
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3282
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3283
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3284
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3285
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3286
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3287
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3288
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3289
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3290
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3291
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3292
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 3293
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 3294
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 3295
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 3296
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3297
    //MOV
    t2.w = t0.z;
    //Instruction 3298
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3299
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3300
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3301
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3302
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3303
    //MOV
    t16_1.x = _LightMatrix0[0].x;
    //Instruction 3304
    //MOV
    t16_1.y = _LightMatrix0[1].x;
    //Instruction 3305
    //MOV
    t16_1.z = _LightMatrix0[2].x;
    //Instruction 3306
    //MOV
    t16_1.w = _LightMatrix0[3].x;
    //Instruction 3307
    //DP4
    vs_TEXCOORD5.x = dot(t16_1, t0);
    //Instruction 3308
    //MOV
    t16_1.x = _LightMatrix0[0].y;
    //Instruction 3309
    //MOV
    t16_1.y = _LightMatrix0[1].y;
    //Instruction 3310
    //MOV
    t16_1.z = _LightMatrix0[2].y;
    //Instruction 3311
    //MOV
    t16_1.w = _LightMatrix0[3].y;
    //Instruction 3312
    //DP4
    vs_TEXCOORD5.y = dot(t16_1, t0);
    //Instruction 3313
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec2 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
lowp vec3 t10_7;
mediump float t16_12;
void main()
{
    //Instruction 3225
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3226
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 3227
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 3228
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 3229
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 3230
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3231
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 3232
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 3233
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 3234
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 3235
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 3236
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 3237
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 3238
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 3239
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 3240
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 3241
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3242
    //MAD
    t16_4.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3243
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 3244
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3245
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 3246
    //MAD
    t16_1.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3247
    //MAD
    t16_4.xyz = t16_7.xyz * t16_1.xxx + t16_4.xyz;
    //Instruction 3248
    //SAMPLE
    t10_3 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 3249
    //MUL
    t16_1.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 3250
    //MUL
    t16_4.xyz = t16_4.xyz * t16_1.xyz;
    //Instruction 3251
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 3252
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3253
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_7;
  mediump vec2 P_8;
  P_8 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_7 = texture2D (_LightTexture0, P_8);
  highp vec3 LightCoord_9;
  LightCoord_9 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (LightCoord_9, LightCoord_9);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp float tmpvar_12;
  highp vec4 shadowCoord_13;
  shadowCoord_13 = xlv_TEXCOORD6;
  highp vec4 tmpvar_14;
  tmpvar_14 = texture2DProj (_ShadowMapTexture, shadowCoord_13);
  mediump float tmpvar_15;
  if ((tmpvar_14.x < (shadowCoord_13.z / shadowCoord_13.w))) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  tmpvar_12 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = _LightColor0.xyz;
  tmpvar_16 = (tmpvar_16 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_7.w)
   * tmpvar_11.w) * tmpvar_12));
  mediump vec3 viewDir_17;
  viewDir_17 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_18;
  tmpvar_18.x = dot ((viewDir_17 - (2.0 * 
    (dot (tmpvar_1, viewDir_17) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_18.y = (1.0 - clamp (dot (tmpvar_1, viewDir_17), 0.0, 1.0));
  mediump vec2 tmpvar_19;
  tmpvar_19.x = ((tmpvar_18 * tmpvar_18) * (tmpvar_18 * tmpvar_18)).x;
  tmpvar_19.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (unity_NHxRoughness, tmpvar_19);
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = (((tmpvar_4 + 
    ((tmpvar_20.w * 16.0) * tmpvar_5)
  ) * tmpvar_16) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_22;
  xlat_varoutput_22.xyz = tmpvar_21.xyz;
  xlat_varoutput_22.w = 1.0;
  gl_FragData[0] = xlat_varoutput_22;
}


#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_14;
  texcoord_14.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_15;
  if ((_UVSec == 0.0)) {
    tmpvar_15 = tmpvar_2;
  } else {
    tmpvar_15 = tmpvar_3;
  };
  texcoord_14.zw = ((tmpvar_15 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_16;
  n_16 = (tmpvar_13.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_17;
  norm_17 = tmpvar_1;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * norm_17.x)
   + 
    (v_19.xyz * norm_17.y)
  ) + (v_20.xyz * norm_17.z)));
  highp vec3 dir_22;
  dir_22 = tmpvar_4.xyz;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_24;
  tmpvar_24.xyz = normalize((tmpvar_23 * dir_22));
  tmpvar_24.w = tmpvar_4.w;
  highp vec3 tmpvar_25;
  tmpvar_25 = tmpvar_24.www;
  mediump vec3 normal_26;
  normal_26 = tmpvar_21;
  mediump vec3 tangent_27;
  tangent_27 = tmpvar_24.xyz;
  mediump vec3 flip_28;
  flip_28 = tmpvar_25;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (((normal_26.yzx * tangent_27.zxy) - (normal_26.zxy * tangent_27.yzx)) * flip_28);
  mediump mat3 tmpvar_30;
  tmpvar_30[0].x = tangent_27.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = normal_26.x;
  tmpvar_30[1].x = tangent_27.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = normal_26.y;
  tmpvar_30[2].x = tangent_27.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = normal_26.z;
  tangentToWorld_6 = tmpvar_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].x;
  v_31.y = tangentToWorld_6[1].x;
  v_31.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].y;
  v_32.y = tangentToWorld_6[1].y;
  v_32.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_32;
  highp vec3 v_33;
  v_33.x = tangentToWorld_6[0].z;
  v_33.y = tangentToWorld_6[1].z;
  v_33.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (_Object2World * _glesVertex);
  tmpvar_11 = (_LightMatrix0 * tmpvar_34);
  tmpvar_12 = (unity_World2Shadow[0] * tmpvar_34);
  highp vec3 tmpvar_35;
  tmpvar_35 = (_WorldSpaceLightPos0.xyz - (tmpvar_13.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_36;
  n_36 = tmpvar_35;
  mediump vec3 tmpvar_37;
  tmpvar_37 = normalize(n_36);
  lightDir_5 = tmpvar_37;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_14;
  xlv_TEXCOORD1 = normalize(n_16);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  mediump float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5.xyz, xlv_TEXCOORD5.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  lowp float tmpvar_9;
  highp vec4 shadowCoord_10;
  shadowCoord_10 = xlv_TEXCOORD6;
  mediump float shadow_11;
  lowp float tmpvar_12;
  tmpvar_12 = shadow2DProjEXT (_ShadowMapTexture, shadowCoord_10);
  mediump float tmpvar_13;
  tmpvar_13 = tmpvar_12;
  shadow_11 = (_LightShadowData.x + (tmpvar_13 * (1.0 - _LightShadowData.x)));
  tmpvar_9 = shadow_11;
  mediump vec3 tmpvar_14;
  tmpvar_14 = _LightColor0.xyz;
  tmpvar_14 = (tmpvar_14 * ((
    (float((xlv_TEXCOORD5.z > 0.0)) * tmpvar_5.w)
   * tmpvar_8.w) * tmpvar_9));
  mediump vec3 viewDir_15;
  viewDir_15 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_16;
  tmpvar_16.x = dot ((viewDir_15 - (2.0 * 
    (dot (tmpvar_1, viewDir_15) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_16.y = (1.0 - clamp (dot (tmpvar_1, viewDir_15), 0.0, 1.0));
  mediump vec2 tmpvar_17;
  tmpvar_17.x = ((tmpvar_16 * tmpvar_16) * (tmpvar_16 * tmpvar_16)).x;
  tmpvar_17.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (unity_NHxRoughness, tmpvar_17);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_18.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_14) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_20;
  xlat_varoutput_20.xyz = tmpvar_19.xyz;
  xlat_varoutput_20.w = 1.0;
  gl_FragData[0] = xlat_varoutput_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3356
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3357
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3358
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3359
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3360
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3361
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3362
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3363
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3364
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3365
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3366
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3367
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3368
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3369
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3370
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3371
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3372
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3373
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3374
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3375
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3376
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3377
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3378
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3379
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3380
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3381
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3382
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3383
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3384
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3385
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3386
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3387
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3388
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3389
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3390
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3391
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3392
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3393
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3394
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3395
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3396
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3397
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3398
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3399
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3400
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3401
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3402
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3403
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3404
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3405
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3406
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3407
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3408
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3409
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3410
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3411
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3412
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 3413
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 3414
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3415
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3416
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3417
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3418
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3419
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3420
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3421
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3422
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3423
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3424
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3425
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3426
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3427
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3428
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3429
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 3430
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 3431
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 3432
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 3433
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 3434
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
lowp float t10_1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump vec3 t16_7;
lowp vec3 t10_7;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 3314
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 3315
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 3316
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 3317
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 3318
    //MOVC
    t10_2 = (tb7) ? 1.0 : 0.0;
    //Instruction 3319
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 3320
    //DP3
    t16_0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3321
    //SAMPLE
    t10_1 = texture(_LightTextureB0, t16_0.xx).w;
    //Instruction 3322
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 3323
    //DIV
    t16_1.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
    //Instruction 3324
    //SAMPLE_C_LZ
    vec3 txVec9 = vec3(t16_1.xy,t16_1.z);
    t10_1 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec9, 0.0);
    //Instruction 3325
    //ADD
    t16_0.x = (-_LightShadowData.x) + 1.0;
    //Instruction 3326
    //MAD
    t16_0.x = t10_1 * t16_0.x + _LightShadowData.x;
    //Instruction 3327
    //MUL
    t10_2 = t16_0.x * t10_2;
    //Instruction 3328
    //MUL
    t16_0.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 3329
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3330
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 3331
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 3332
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 3333
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 3334
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3335
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 3336
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 3337
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 3338
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 3339
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 3340
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 3341
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 3342
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 3343
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 3344
    //MUL
    t16_1.x = t10_1 * 16.000000;
    //Instruction 3345
    //SAMPLE
    t10_7.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3346
    //MAD
    t16_9.xyz = _Color.xyz * t10_7.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3347
    //MUL
    t16_7.xyz = t10_7.xyz * _Color.xyz;
    //Instruction 3348
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3349
    //MUL
    t16_9.xyz = t16_1.xxx * t16_9.xyz;
    //Instruction 3350
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3351
    //MAD
    t16_9.xyz = t16_7.xyz * vec3(t16_18) + t16_9.xyz;
    //Instruction 3352
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 3353
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 3354
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3355
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp float tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_5 = tmpvar_6;
  mediump float atten_7;
  atten_7 = tmpvar_5;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (_Object2World * _glesVertex);
  tmpvar_10 = (unity_World2Shadow[0] * tmpvar_32);
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_33.x;
  tmpvar_8.w = tmpvar_33.y;
  tmpvar_9.w = tmpvar_33.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_32).xy;
  xlv_TEXCOORD6 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_6 = tmpvar_7;
  mediump float atten_8;
  atten_8 = (tmpvar_5.w * tmpvar_6);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = 1.0;
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_35;
  tmpvar_35 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_35).xyz;
  xlv_TEXCOORD6 = (tmpvar_35.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTexture0, vec2(tmpvar_7));
  highp float mydist_9;
  mydist_9 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_10;
  tmpvar_10 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_11;
  if ((tmpvar_10 < mydist_9)) {
    tmpvar_11 = _LightShadowData.x;
  } else {
    tmpvar_11 = 1.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = _LightColor0.xyz;
  tmpvar_12 = (tmpvar_12 * (tmpvar_8.w * tmpvar_11));
  mediump vec3 viewDir_13;
  viewDir_13 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_14;
  tmpvar_14.x = dot ((viewDir_13 - (2.0 * 
    (dot (tmpvar_1, viewDir_13) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_14.y = (1.0 - clamp (dot (tmpvar_1, viewDir_13), 0.0, 1.0));
  mediump vec2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_14 * tmpvar_14) * (tmpvar_14 * tmpvar_14)).x;
  tmpvar_15.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (unity_NHxRoughness, tmpvar_15);
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = (((tmpvar_4 + 
    ((tmpvar_16.w * 16.0) * tmpvar_5)
  ) * tmpvar_12) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_18;
  xlat_varoutput_18.xyz = tmpvar_17.xyz;
  xlat_varoutput_18.w = 1.0;
  gl_FragData[0] = xlat_varoutput_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3474
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3475
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3476
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3477
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3478
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3479
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3480
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3481
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3482
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3483
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3484
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3485
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3486
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3487
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3488
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3489
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3490
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3491
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 3492
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3493
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3494
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3495
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3496
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3497
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3498
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3499
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3500
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3501
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3502
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3503
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3504
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3505
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3506
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3507
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3508
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3509
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3510
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3511
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3512
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3513
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3514
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3515
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3516
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3517
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3518
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3519
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3520
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3521
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3522
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3523
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3524
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3525
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3526
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3527
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3528
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3529
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3530
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3531
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3532
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3533
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3534
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3535
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3536
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3537
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3538
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3539
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3540
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3541
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3542
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 3435
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 3436
    //SQRT
    t0 = sqrt(t0);
    //Instruction 3437
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 3438
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 3439
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 3440
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 3441
    //LT
    tb0 = t6<t0;
    //Instruction 3442
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 3443
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3444
    //SAMPLE
    t10_0 = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 3445
    //MUL
    t16_0 = t16_2.x * t10_0;
    //Instruction 3446
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 3447
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3448
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 3449
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 3450
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 3451
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 3452
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3453
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 3454
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 3455
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 3456
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 3457
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 3458
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 3459
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 3460
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 3461
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 3462
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 3463
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3464
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3465
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 3466
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3467
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 3468
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3469
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 3470
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 3471
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 3472
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3473
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  highp vec4 tmpvar_35;
  tmpvar_35 = (_Object2World * _glesVertex);
  xlv_TEXCOORD5 = (_LightMatrix0 * tmpvar_35).xyz;
  xlv_TEXCOORD6 = (tmpvar_35.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic));
  tmpvar_4 = (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)));
  mediump vec3 tmpvar_6;
  tmpvar_6.x = xlv_TEXCOORD2.w;
  tmpvar_6.y = xlv_TEXCOORD2_1.w;
  tmpvar_6.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  highp float mydist_10;
  mydist_10 = ((sqrt(
    dot (xlv_TEXCOORD6, xlv_TEXCOORD6)
  ) * _LightPositionRange.w) * 0.97);
  highp float tmpvar_11;
  tmpvar_11 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD6), vec4(1.0, 0.003921569, 1.53787e-05, 6.030863e-08));
  mediump float tmpvar_12;
  if ((tmpvar_11 < mydist_10)) {
    tmpvar_12 = _LightShadowData.x;
  } else {
    tmpvar_12 = 1.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = _LightColor0.xyz;
  tmpvar_13 = (tmpvar_13 * ((tmpvar_8.w * tmpvar_9.w) * tmpvar_12));
  mediump vec3 viewDir_14;
  viewDir_14 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_15;
  tmpvar_15.x = dot ((viewDir_14 - (2.0 * 
    (dot (tmpvar_1, viewDir_14) * tmpvar_1)
  )), tmpvar_6);
  tmpvar_15.y = (1.0 - clamp (dot (tmpvar_1, viewDir_14), 0.0, 1.0));
  mediump vec2 tmpvar_16;
  tmpvar_16.x = ((tmpvar_15 * tmpvar_15) * (tmpvar_15 * tmpvar_15)).x;
  tmpvar_16.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (unity_NHxRoughness, tmpvar_16);
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = (((tmpvar_4 + 
    ((tmpvar_17.w * 16.0) * tmpvar_5)
  ) * tmpvar_13) * clamp (dot (tmpvar_1, tmpvar_6), 0.0, 1.0));
  mediump vec4 xlat_varoutput_19;
  xlat_varoutput_19.xyz = tmpvar_18.xyz;
  xlat_varoutput_19.w = 1.0;
  gl_FragData[0] = xlat_varoutput_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 2814
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2815
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2816
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2817
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2818
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2819
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2820
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2821
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2822
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2823
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2824
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2825
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2826
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2827
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2828
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2829
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2830
    //MAD
    t1.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2831
    //ADD
    vs_TEXCOORD6.xyz = t0.xyz + (-_LightPositionRange.xyz);
    //Instruction 2832
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 2833
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 2834
    //MUL
    t16_2.xyz = t1.xyz * t16_2.xxx;
    //Instruction 2835
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 2836
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2837
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 2838
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 2839
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 2840
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2841
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 2842
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 2843
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2844
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2845
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2846
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2847
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2848
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2849
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2850
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2851
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2852
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2853
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 2854
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 2855
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 2856
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 2857
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 2858
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 2859
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 2860
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 2861
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 2862
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 2863
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2864
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2865
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2866
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2867
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2868
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2869
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2870
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2871
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 2872
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2873
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2874
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2875
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2876
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 2877
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 2878
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 2879
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 2880
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 2881
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 2882
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform highp samplerCube _ShadowMapTexture;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_9;
mediump float t16_20;
void main()
{
    //Instruction 2773
    //DP3
    t0 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    //Instruction 2774
    //SQRT
    t0 = sqrt(t0);
    //Instruction 2775
    //MUL
    t0 = t0 * _LightPositionRange.w;
    //Instruction 2776
    //MUL
    t0 = t0 * 0.970000;
    //Instruction 2777
    //SAMPLE
    t1 = texture(_ShadowMapTexture, vs_TEXCOORD6.xyz);
    //Instruction 2778
    //DP4
    t6 = dot(t1, vec4(1.0, 0.003922, 0.000015, 0.000000));
    //Instruction 2779
    //LT
    tb0 = t6<t0;
    //Instruction 2780
    //MOVC
    t16_2.x = (tb0) ? _LightShadowData.x : 1.0;
    //Instruction 2781
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 2782
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 2783
    //SAMPLE
    t10_6.x = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 2784
    //MUL
    t16_0 = t10_6.x * t10_0;
    //Instruction 2785
    //MUL
    t16_0 = t16_2.x * t16_0;
    //Instruction 2786
    //MUL
    t16_2.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 2787
    //DP3
    t16_20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2788
    //RSQ
    t16_20 = inversesqrt(t16_20);
    //Instruction 2789
    //MUL
    t16_3.xyz = vec3(t16_20) * vs_TEXCOORD4.xyz;
    //Instruction 2790
    //DP3
    t16_20 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 2791
    //ADD
    t16_20 = t16_20 + t16_20;
    //Instruction 2792
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_20)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2793
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 2794
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 2795
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 2796
    //DP3
    t16_20 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 2797
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 2798
    //MUL
    t16_20 = t16_20 * t16_20;
    //Instruction 2799
    //MUL
    t16_4.x = t16_20 * t16_20;
    //Instruction 2800
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 2801
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 2802
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 2803
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2804
    //MAD
    t16_9.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2805
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 2806
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2807
    //MUL
    t16_9.xyz = vec3(t16_0) * t16_9.xyz;
    //Instruction 2808
    //MAD
    t16_20 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2809
    //MAD
    t16_9.xyz = t16_6.xyz * vec3(t16_20) + t16_9.xyz;
    //Instruction 2810
    //MUL
    t16_2.xyz = t16_2.xyz * t16_9.xyz;
    //Instruction 2811
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_2.xyz;
    //Instruction 2812
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2813
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_5 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].x;
  v_29.y = tangentToWorld_5[1].x;
  v_29.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].y;
  v_30.y = tangentToWorld_5[1].y;
  v_30.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].z;
  v_31.y = tangentToWorld_5[1].z;
  v_31.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_31;
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_32.x;
  tmpvar_8.w = tmpvar_32.y;
  tmpvar_9.w = tmpvar_32.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp float shadow_5;
  shadow_5 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  mediump float atten_6;
  atten_6 = shadow_5;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = 1.0;
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 3574
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3575
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3576
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3577
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3578
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3579
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3580
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3581
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3582
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3583
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3584
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3585
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3586
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3587
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3588
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 3589
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 3590
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 3591
    //MOV
    t1.w = t0.x;
    //Instruction 3592
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3593
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3594
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3595
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3596
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3597
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 3598
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3599
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3600
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3601
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3602
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3603
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3604
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3605
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3606
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3607
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3608
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3609
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3610
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3611
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3612
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 3613
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 3614
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 3615
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 3616
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3617
    //MOV
    t2.w = t0.z;
    //Instruction 3618
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3619
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3620
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3621
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3622
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3623
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 3624
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 3625
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 3626
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 3627
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3628
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_4;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_9;
lowp vec3 t10_9;
mediump float t16_15;
void main()
{
    //Instruction 3543
    //SAMPLE_C_LZ
    vec3 txVec10 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec10, 0.0);
    //Instruction 3544
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 3545
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 3546
    //MUL
    t16_0.xyz = t16_0.xxx * _LightColor0.xyz;
    //Instruction 3547
    //DP3
    t16_15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3548
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 3549
    //MUL
    t16_1.xyz = vec3(t16_15) * vs_TEXCOORD4.xyz;
    //Instruction 3550
    //DP3
    t16_15 = dot((-vs_TEXCOORD1.xyz), t16_1.xyz);
    //Instruction 3551
    //ADD
    t16_15 = t16_15 + t16_15;
    //Instruction 3552
    //MAD
    t16_2.xyz = t16_1.xyz * (-vec3(t16_15)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3553
    //MOV
    t16_3.x = vs_TEXCOORD2.w;
    //Instruction 3554
    //MOV
    t16_3.y = vs_TEXCOORD3.w;
    //Instruction 3555
    //MOV
    t16_3.z = vs_TEXCOORD4.w;
    //Instruction 3556
    //DP3
    t16_15 = dot(t16_2.xyz, t16_3.xyz);
    //Instruction 3557
    //DP3
    t16_1.x = dot(t16_1.xyz, t16_3.xyz);
    t16_1.x = clamp(t16_1.x, 0.0, 1.0);
    //Instruction 3558
    //MUL
    t16_15 = t16_15 * t16_15;
    //Instruction 3559
    //MUL
    t16_2.x = t16_15 * t16_15;
    //Instruction 3560
    //ADD
    t16_2.y = (-_Glossiness) + 1.0;
    //Instruction 3561
    //SAMPLE
    t10_4 = texture(unity_NHxRoughness, t16_2.xy).w;
    //Instruction 3562
    //MUL
    t16_4 = t10_4 * 16.000000;
    //Instruction 3563
    //SAMPLE
    t10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 3564
    //MAD
    t16_6.xyz = _Color.xyz * t10_9.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3565
    //MUL
    t16_9.xyz = t10_9.xyz * _Color.xyz;
    //Instruction 3566
    //MAD
    t16_6.xyz = vec3(_Metallic) * t16_6.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3567
    //MUL
    t16_6.xyz = t16_6.xyz * vec3(t16_4);
    //Instruction 3568
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3569
    //MAD
    t16_6.xyz = t16_9.xyz * vec3(t16_15) + t16_6.xyz;
    //Instruction 3570
    //MUL
    t16_0.xyz = t16_0.xyz * t16_6.xyz;
    //Instruction 3571
    //MUL
    SV_Target0.xyz = t16_1.xxx * t16_0.xyz;
    //Instruction 3572
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 3573
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec2 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_5 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].x;
  v_30.y = tangentToWorld_5[1].x;
  v_30.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_5[0].y;
  v_31.y = tangentToWorld_5[1].y;
  v_31.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_5[0].z;
  v_32.y = tangentToWorld_5[1].z;
  v_32.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (_Object2World * _glesVertex);
  tmpvar_10 = (_LightMatrix0 * tmpvar_33).xy;
  tmpvar_11 = (unity_World2Shadow[0] * tmpvar_33);
  highp vec3 tmpvar_34;
  tmpvar_34 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_34.x;
  tmpvar_8.w = tmpvar_34.y;
  tmpvar_9.w = tmpvar_34.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _LightShadowData;
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  lowp float shadow_6;
  shadow_6 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  mediump float atten_7;
  atten_7 = (tmpvar_5.w * shadow_6);
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = 1.0;
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec2 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 2916
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 2917
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 2918
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 2919
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 2920
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 2921
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 2922
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 2923
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 2924
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 2925
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 2926
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 2927
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 2928
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 2929
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 2930
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 2931
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 2932
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 2933
    //MOV
    t1.w = t0.x;
    //Instruction 2934
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 2935
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 2936
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 2937
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2938
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2939
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 2940
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 2941
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 2942
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 2943
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 2944
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 2945
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 2946
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 2947
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 2948
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 2949
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 2950
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 2951
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 2952
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 2953
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 2954
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 2955
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 2956
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 2957
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 2958
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 2959
    //MOV
    t2.w = t0.z;
    //Instruction 2960
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 2961
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 2962
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 2963
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 2964
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 2965
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 2966
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 2967
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 2968
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 2969
    //DP4
    t3.x = dot(t16_0, t1);
    //Instruction 2970
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 2971
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 2972
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 2973
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 2974
    //DP4
    t3.y = dot(t16_0, t1);
    //Instruction 2975
    //MOV
    vs_TEXCOORD5.xy = t3.xy;
    //Instruction 2976
    //MUL
    t0 = t1.yyyy * unity_World2Shadow[0][1];
    //Instruction 2977
    //MAD
    t0 = unity_World2Shadow[0][0] * t1.xxxx + t0;
    //Instruction 2978
    //MAD
    t0 = unity_World2Shadow[0][2] * t1.zzzz + t0;
    //Instruction 2979
    //MAD
    t0 = unity_World2Shadow[0][3] * t1.wwww + t0;
    //Instruction 2980
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 2981
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec2 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_6;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump float t16_15;
void main()
{
    //Instruction 2883
    //SAMPLE_C_LZ
    vec3 txVec13 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec13, 0.0);
    //Instruction 2884
    //ADD
    t16_5 = (-_LightShadowData.x) + 1.0;
    //Instruction 2885
    //MAD
    t16_0.x = t16_0.x * t16_5 + _LightShadowData.x;
    //Instruction 2886
    //SAMPLE
    t10_1 = texture(_LightTexture0, vs_TEXCOORD5.xy).w;
    //Instruction 2887
    //MUL
    t16_1 = t16_0.x * t10_1;
    //Instruction 2888
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 2889
    //DP3
    t16_15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2890
    //RSQ
    t16_15 = inversesqrt(t16_15);
    //Instruction 2891
    //MUL
    t16_2.xyz = vec3(t16_15) * vs_TEXCOORD4.xyz;
    //Instruction 2892
    //DP3
    t16_15 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 2893
    //ADD
    t16_15 = t16_15 + t16_15;
    //Instruction 2894
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_15)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2895
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 2896
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 2897
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 2898
    //DP3
    t16_15 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 2899
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 2900
    //MUL
    t16_15 = t16_15 * t16_15;
    //Instruction 2901
    //MUL
    t16_3.x = t16_15 * t16_15;
    //Instruction 2902
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 2903
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 2904
    //MUL
    t16_1 = t10_1 * 16.000000;
    //Instruction 2905
    //SAMPLE
    t10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    //Instruction 2906
    //MAD
    t16_7.xyz = _Color.xyz * t10_6.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 2907
    //MUL
    t16_6.xyz = t10_6.xyz * _Color.xyz;
    //Instruction 2908
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 2909
    //MUL
    t16_7.xyz = vec3(t16_1) * t16_7.xyz;
    //Instruction 2910
    //MAD
    t16_15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 2911
    //MAD
    t16_7.xyz = t16_6.xyz * vec3(t16_15) + t16_7.xyz;
    //Instruction 2912
    //MUL
    t16_0.xyz = t16_0.xyz * t16_7.xyz;
    //Instruction 2913
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_0.xyz;
    //Instruction 2914
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 2915
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTexture0, vec2(tmpvar_5));
  mediump float atten_7;
  atten_7 = tmpvar_6.w;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _LightColor0.xyz;
  tmpvar_8 = (tmpvar_8 * atten_7);
  mediump vec3 viewDir_9;
  viewDir_9 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_10;
  tmpvar_10.x = dot ((viewDir_9 - (2.0 * 
    (dot (tmpvar_1, viewDir_9) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_10.y = (1.0 - clamp (dot (tmpvar_1, viewDir_9), 0.0, 1.0));
  mediump vec2 tmpvar_11;
  tmpvar_11.x = ((tmpvar_10 * tmpvar_10) * (tmpvar_10 * tmpvar_10)).x;
  tmpvar_11.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (unity_NHxRoughness, tmpvar_11);
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_12.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_8) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_14;
  xlat_varoutput_14.xyz = tmpvar_13.xyz;
  xlat_varoutput_14.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3659
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3660
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3661
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3662
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3663
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3664
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3665
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3666
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3667
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3668
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3669
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3670
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3671
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3672
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3673
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3674
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3675
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3676
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3677
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3678
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3679
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3680
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3681
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3682
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3683
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3684
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3685
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3686
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3687
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3688
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3689
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3690
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3691
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3692
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3693
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3694
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3695
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3696
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3697
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3698
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3699
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3700
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3701
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3702
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3703
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3704
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3705
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3706
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3707
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3708
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3709
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3710
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3711
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3712
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3713
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3714
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3715
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3716
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3717
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3718
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3719
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3720
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3721
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3722
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3723
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3724
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3725
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3726
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
mediump float t16_16;
void main()
{
    //Instruction 3629
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3630
    //SAMPLE
    t10_0 = texture(_LightTexture0, vec2(t0)).w;
    //Instruction 3631
    //MUL
    t16_1.xyz = vec3(t10_0) * _LightColor0.xyz;
    //Instruction 3632
    //DP3
    t16_16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3633
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3634
    //MUL
    t16_2.xyz = vec3(t16_16) * vs_TEXCOORD4.xyz;
    //Instruction 3635
    //DP3
    t16_16 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 3636
    //ADD
    t16_16 = t16_16 + t16_16;
    //Instruction 3637
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_16)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3638
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 3639
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 3640
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 3641
    //DP3
    t16_16 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 3642
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 3643
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 3644
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 3645
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 3646
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 3647
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 3648
    //SAMPLE
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3649
    //MAD
    t16_7.xyz = t10_3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3650
    //MUL
    t16_3 = t10_3.wxyz * _Color.wxyz;
    //Instruction 3651
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3652
    //MUL
    t16_7.xyz = vec3(t16_0) * t16_7.xyz;
    //Instruction 3653
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3654
    //MAD
    t16_7.xyz = t16_3.yzw * vec3(t16_16) + t16_7.xyz;
    //Instruction 3655
    //MOV
    SV_Target0.w = t16_3.x;
    //Instruction 3656
    //MUL
    t16_1.xyz = t16_1.xyz * t16_7.xyz;
    //Instruction 3657
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_1.xyz;
    //Instruction 3658
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _LightColor0.xyz;
  mediump vec3 viewDir_6;
  viewDir_6 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_7;
  tmpvar_7.x = dot ((viewDir_6 - (2.0 * 
    (dot (tmpvar_1, viewDir_6) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_7.y = (1.0 - clamp (dot (tmpvar_1, viewDir_6), 0.0, 1.0));
  mediump vec2 tmpvar_8;
  tmpvar_8.x = ((tmpvar_7 * tmpvar_7) * (tmpvar_7 * tmpvar_7)).x;
  tmpvar_8.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (unity_NHxRoughness, tmpvar_8);
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_9.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_5) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_11;
  xlat_varoutput_11.xyz = tmpvar_10.xyz;
  xlat_varoutput_11.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 3009
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3010
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3011
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3012
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3013
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3014
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3015
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3016
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3017
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3018
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3019
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3020
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3021
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3022
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3023
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 3024
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 3025
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 3026
    //MOV
    t1.w = t0.x;
    //Instruction 3027
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3028
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3029
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3030
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3031
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3032
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 3033
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3034
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3035
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3036
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3037
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3038
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3039
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3040
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3041
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3042
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3043
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3044
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3045
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3046
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3047
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 3048
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 3049
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 3050
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 3051
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3052
    //MOV
    t2.w = t0.z;
    //Instruction 3053
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3054
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 2982
    //DP3
    t16_0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 2983
    //RSQ
    t16_0.x = inversesqrt(t16_0.x);
    //Instruction 2984
    //MUL
    t16_0.xyz = t16_0.xxx * vs_TEXCOORD4.xyz;
    //Instruction 2985
    //DP3
    t16_12 = dot((-vs_TEXCOORD1.xyz), t16_0.xyz);
    //Instruction 2986
    //ADD
    t16_12 = t16_12 + t16_12;
    //Instruction 2987
    //MAD
    t16_1.xyz = t16_0.xyz * (-vec3(t16_12)) + (-vs_TEXCOORD1.xyz);
    //Instruction 2988
    //MOV
    t16_2.x = vs_TEXCOORD2.w;
    //Instruction 2989
    //MOV
    t16_2.y = vs_TEXCOORD3.w;
    //Instruction 2990
    //MOV
    t16_2.z = vs_TEXCOORD4.w;
    //Instruction 2991
    //DP3
    t16_12 = dot(t16_1.xyz, t16_2.xyz);
    //Instruction 2992
    //DP3
    t16_0.x = dot(t16_0.xyz, t16_2.xyz);
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 2993
    //MUL
    t16_4.x = t16_12 * t16_12;
    //Instruction 2994
    //MUL
    t16_1.x = t16_4.x * t16_4.x;
    //Instruction 2995
    //ADD
    t16_1.y = (-_Glossiness) + 1.0;
    //Instruction 2996
    //SAMPLE
    t10_3 = texture(unity_NHxRoughness, t16_1.xy).w;
    //Instruction 2997
    //MUL
    t16_3 = t10_3 * 16.000000;
    //Instruction 2998
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 2999
    //MAD
    t16_4.xyz = t10_1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3000
    //MUL
    t16_1 = t10_1.wxyz * _Color.wxyz;
    //Instruction 3001
    //MAD
    t16_4.xyz = vec3(_Metallic) * t16_4.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3002
    //MUL
    t16_4.xyz = t16_4.xyz * vec3(t16_3);
    //Instruction 3003
    //MAD
    t16_2.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3004
    //MAD
    t16_4.xyz = t16_1.yzw * t16_2.xxx + t16_4.xyz;
    //Instruction 3005
    //MOV
    SV_Target0.w = t16_1.x;
    //Instruction 3006
    //MUL
    t16_4.xyz = t16_4.xyz * _LightColor0.xyz;
    //Instruction 3007
    //MUL
    SV_Target0.xyz = t16_0.xxx * t16_4.xyz;
    //Instruction 3008
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_13;
  texcoord_13.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_14;
  if ((_UVSec == 0.0)) {
    tmpvar_14 = tmpvar_2;
  } else {
    tmpvar_14 = tmpvar_3;
  };
  texcoord_13.zw = ((tmpvar_14 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_15;
  n_15 = (tmpvar_12.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_16;
  norm_16 = tmpvar_1;
  highp vec4 v_17;
  v_17.x = _World2Object[0].x;
  v_17.y = _World2Object[1].x;
  v_17.z = _World2Object[2].x;
  v_17.w = _World2Object[3].x;
  highp vec4 v_18;
  v_18.x = _World2Object[0].y;
  v_18.y = _World2Object[1].y;
  v_18.z = _World2Object[2].y;
  v_18.w = _World2Object[3].y;
  highp vec4 v_19;
  v_19.x = _World2Object[0].z;
  v_19.y = _World2Object[1].z;
  v_19.z = _World2Object[2].z;
  v_19.w = _World2Object[3].z;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(((
    (v_17.xyz * norm_16.x)
   + 
    (v_18.xyz * norm_16.y)
  ) + (v_19.xyz * norm_16.z)));
  highp vec3 dir_21;
  dir_21 = tmpvar_4.xyz;
  highp mat3 tmpvar_22;
  tmpvar_22[0] = _Object2World[0].xyz;
  tmpvar_22[1] = _Object2World[1].xyz;
  tmpvar_22[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_23;
  tmpvar_23.xyz = normalize((tmpvar_22 * dir_21));
  tmpvar_23.w = tmpvar_4.w;
  highp vec3 tmpvar_24;
  tmpvar_24 = tmpvar_23.www;
  mediump vec3 normal_25;
  normal_25 = tmpvar_20;
  mediump vec3 tangent_26;
  tangent_26 = tmpvar_23.xyz;
  mediump vec3 flip_27;
  flip_27 = tmpvar_24;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (((normal_25.yzx * tangent_26.zxy) - (normal_25.zxy * tangent_26.yzx)) * flip_27);
  mediump mat3 tmpvar_29;
  tmpvar_29[0].x = tangent_26.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = normal_25.x;
  tmpvar_29[1].x = tangent_26.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = normal_25.y;
  tmpvar_29[2].x = tangent_26.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = normal_25.z;
  tangentToWorld_6 = tmpvar_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].x;
  v_30.y = tangentToWorld_6[1].x;
  v_30.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].y;
  v_31.y = tangentToWorld_6[1].y;
  v_31.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_31;
  highp vec3 v_32;
  v_32.x = tangentToWorld_6[0].z;
  v_32.y = tangentToWorld_6[1].z;
  v_32.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_32;
  tmpvar_11 = (_LightMatrix0 * (_Object2World * _glesVertex));
  highp vec3 tmpvar_33;
  tmpvar_33 = (_WorldSpaceLightPos0.xyz - (tmpvar_12.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_34;
  n_34 = tmpvar_33;
  mediump vec3 tmpvar_35;
  tmpvar_35 = normalize(n_34);
  lightDir_5 = tmpvar_35;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_13;
  xlv_TEXCOORD1 = normalize(n_15);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  mediump vec2 P_6;
  P_6 = ((xlv_TEXCOORD5.xy / xlv_TEXCOORD5.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp vec3 LightCoord_7;
  LightCoord_7 = xlv_TEXCOORD5.xyz;
  highp float tmpvar_8;
  tmpvar_8 = dot (LightCoord_7, LightCoord_7);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTextureB0, vec2(tmpvar_8));
  mediump vec3 tmpvar_10;
  tmpvar_10 = _LightColor0.xyz;
  tmpvar_10 = (tmpvar_10 * ((
    float((xlv_TEXCOORD5.z > 0.0))
   * tmpvar_5.w) * tmpvar_9.w));
  mediump vec3 viewDir_11;
  viewDir_11 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_12;
  tmpvar_12.x = dot ((viewDir_11 - (2.0 * 
    (dot (tmpvar_1, viewDir_11) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_12.y = (1.0 - clamp (dot (tmpvar_1, viewDir_11), 0.0, 1.0));
  mediump vec2 tmpvar_13;
  tmpvar_13.x = ((tmpvar_12 * tmpvar_12) * (tmpvar_12 * tmpvar_12)).x;
  tmpvar_13.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (unity_NHxRoughness, tmpvar_13);
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_14.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_10) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_16;
  xlat_varoutput_16.xyz = tmpvar_15.xyz;
  xlat_varoutput_16.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3764
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3765
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3766
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3767
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3768
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3769
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3770
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3771
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3772
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3773
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3774
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3775
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3776
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3777
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3778
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3779
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3780
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3781
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3782
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3783
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3784
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3785
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3786
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3787
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3788
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3789
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3790
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3791
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3792
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3793
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3794
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3795
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3796
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3797
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3798
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3799
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3800
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3801
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3802
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3803
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3804
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3805
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3806
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3807
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3808
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3809
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3810
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3811
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3812
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3813
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3814
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3815
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3816
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3817
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3818
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3819
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3820
    //DP4
    t0.x = dot(t16_0, t1);
    //Instruction 3821
    //MOV
    t16_2.x = _LightMatrix0[0].y;
    //Instruction 3822
    //MOV
    t16_2.y = _LightMatrix0[1].y;
    //Instruction 3823
    //MOV
    t16_2.z = _LightMatrix0[2].y;
    //Instruction 3824
    //MOV
    t16_2.w = _LightMatrix0[3].y;
    //Instruction 3825
    //DP4
    t0.y = dot(t16_2, t1);
    //Instruction 3826
    //MOV
    t16_2.x = _LightMatrix0[0].z;
    //Instruction 3827
    //MOV
    t16_2.y = _LightMatrix0[1].z;
    //Instruction 3828
    //MOV
    t16_2.z = _LightMatrix0[2].z;
    //Instruction 3829
    //MOV
    t16_2.w = _LightMatrix0[3].z;
    //Instruction 3830
    //DP4
    t0.z = dot(t16_2, t1);
    //Instruction 3831
    //MOV
    t16_2.x = _LightMatrix0[0].w;
    //Instruction 3832
    //MOV
    t16_2.y = _LightMatrix0[1].w;
    //Instruction 3833
    //MOV
    t16_2.z = _LightMatrix0[2].w;
    //Instruction 3834
    //MOV
    t16_2.w = _LightMatrix0[3].w;
    //Instruction 3835
    //DP4
    t0.w = dot(t16_2, t1);
    //Instruction 3836
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 3837
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 t16_0;
mediump float t16_1;
lowp float t10_1;
mediump vec4 t16_2;
lowp vec4 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
bool tb7;
mediump vec3 t16_9;
mediump float t16_18;
void main()
{
    //Instruction 3727
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    //Instruction 3728
    //ADD
    t16_0.xy = t16_0.xy + vec2(0.500000, 0.500000);
    //Instruction 3729
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 3730
    //LT
    tb7 = 0.0<vs_TEXCOORD5.z;
    //Instruction 3731
    //MOVC
    t10_2.x = (tb7) ? 1.0 : 0.0;
    //Instruction 3732
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 3733
    //DP3
    t16_1 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3734
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 3735
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 3736
    //MUL
    t16_0.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 3737
    //DP3
    t16_18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3738
    //RSQ
    t16_18 = inversesqrt(t16_18);
    //Instruction 3739
    //MUL
    t16_3.xyz = vec3(t16_18) * vs_TEXCOORD4.xyz;
    //Instruction 3740
    //DP3
    t16_18 = dot((-vs_TEXCOORD1.xyz), t16_3.xyz);
    //Instruction 3741
    //ADD
    t16_18 = t16_18 + t16_18;
    //Instruction 3742
    //MAD
    t16_4.xyz = t16_3.xyz * (-vec3(t16_18)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3743
    //MOV
    t16_5.x = vs_TEXCOORD2.w;
    //Instruction 3744
    //MOV
    t16_5.y = vs_TEXCOORD3.w;
    //Instruction 3745
    //MOV
    t16_5.z = vs_TEXCOORD4.w;
    //Instruction 3746
    //DP3
    t16_18 = dot(t16_4.xyz, t16_5.xyz);
    //Instruction 3747
    //DP3
    t16_3.x = dot(t16_3.xyz, t16_5.xyz);
    t16_3.x = clamp(t16_3.x, 0.0, 1.0);
    //Instruction 3748
    //MUL
    t16_18 = t16_18 * t16_18;
    //Instruction 3749
    //MUL
    t16_4.x = t16_18 * t16_18;
    //Instruction 3750
    //ADD
    t16_4.y = (-_Glossiness) + 1.0;
    //Instruction 3751
    //SAMPLE
    t10_1 = texture(unity_NHxRoughness, t16_4.xy).w;
    //Instruction 3752
    //MUL
    t16_1 = t10_1 * 16.000000;
    //Instruction 3753
    //SAMPLE
    t10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3754
    //MAD
    t16_9.xyz = t10_2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3755
    //MUL
    t16_2 = t10_2.wxyz * _Color.wxyz;
    //Instruction 3756
    //MAD
    t16_9.xyz = vec3(_Metallic) * t16_9.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3757
    //MUL
    t16_9.xyz = vec3(t16_1) * t16_9.xyz;
    //Instruction 3758
    //MAD
    t16_18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3759
    //MAD
    t16_9.xyz = t16_2.yzw * vec3(t16_18) + t16_9.xyz;
    //Instruction 3760
    //MOV
    SV_Target0.w = t16_2.x;
    //Instruction 3761
    //MUL
    t16_0.xyz = t16_0.xyz * t16_9.xyz;
    //Instruction 3762
    //MUL
    SV_Target0.xyz = t16_3.xxx * t16_0.xyz;
    //Instruction 3763
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp vec3 lightDir_5;
  highp mat3 tangentToWorld_6;
  highp vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * _glesVertex);
  tmpvar_7 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_12;
  texcoord_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_13;
  if ((_UVSec == 0.0)) {
    tmpvar_13 = tmpvar_2;
  } else {
    tmpvar_13 = tmpvar_3;
  };
  texcoord_12.zw = ((tmpvar_13 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_14;
  n_14 = (tmpvar_11.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_15;
  norm_15 = tmpvar_1;
  highp vec4 v_16;
  v_16.x = _World2Object[0].x;
  v_16.y = _World2Object[1].x;
  v_16.z = _World2Object[2].x;
  v_16.w = _World2Object[3].x;
  highp vec4 v_17;
  v_17.x = _World2Object[0].y;
  v_17.y = _World2Object[1].y;
  v_17.z = _World2Object[2].y;
  v_17.w = _World2Object[3].y;
  highp vec4 v_18;
  v_18.x = _World2Object[0].z;
  v_18.y = _World2Object[1].z;
  v_18.z = _World2Object[2].z;
  v_18.w = _World2Object[3].z;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(((
    (v_16.xyz * norm_15.x)
   + 
    (v_17.xyz * norm_15.y)
  ) + (v_18.xyz * norm_15.z)));
  highp vec3 dir_20;
  dir_20 = tmpvar_4.xyz;
  highp mat3 tmpvar_21;
  tmpvar_21[0] = _Object2World[0].xyz;
  tmpvar_21[1] = _Object2World[1].xyz;
  tmpvar_21[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_22;
  tmpvar_22.xyz = normalize((tmpvar_21 * dir_20));
  tmpvar_22.w = tmpvar_4.w;
  highp vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22.www;
  mediump vec3 normal_24;
  normal_24 = tmpvar_19;
  mediump vec3 tangent_25;
  tangent_25 = tmpvar_22.xyz;
  mediump vec3 flip_26;
  flip_26 = tmpvar_23;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (((normal_24.yzx * tangent_25.zxy) - (normal_24.zxy * tangent_25.yzx)) * flip_26);
  mediump mat3 tmpvar_28;
  tmpvar_28[0].x = tangent_25.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = normal_24.x;
  tmpvar_28[1].x = tangent_25.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = normal_24.y;
  tmpvar_28[2].x = tangent_25.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = normal_24.z;
  tangentToWorld_6 = tmpvar_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_6[0].x;
  v_29.y = tangentToWorld_6[1].x;
  v_29.z = tangentToWorld_6[2].x;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_6[0].y;
  v_30.y = tangentToWorld_6[1].y;
  v_30.z = tangentToWorld_6[2].y;
  tmpvar_9.xyz = v_30;
  highp vec3 v_31;
  v_31.x = tangentToWorld_6[0].z;
  v_31.y = tangentToWorld_6[1].z;
  v_31.z = tangentToWorld_6[2].z;
  tmpvar_10.xyz = v_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_WorldSpaceLightPos0.xyz - (tmpvar_11.xyz * _WorldSpaceLightPos0.w));
  mediump vec3 n_33;
  n_33 = tmpvar_32;
  mediump vec3 tmpvar_34;
  tmpvar_34 = normalize(n_33);
  lightDir_5 = tmpvar_34;
  tmpvar_8.w = lightDir_5.x;
  tmpvar_9.w = lightDir_5.y;
  tmpvar_10.w = lightDir_5.z;
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = texcoord_12;
  xlv_TEXCOORD1 = normalize(n_14);
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD2_1 = tmpvar_9;
  xlv_TEXCOORD2_2 = tmpvar_10;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD5, xlv_TEXCOORD5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightTextureB0, vec2(tmpvar_5));
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_8;
  atten_8 = (tmpvar_6.w * tmpvar_7.w);
  mediump vec3 tmpvar_9;
  tmpvar_9 = _LightColor0.xyz;
  tmpvar_9 = (tmpvar_9 * atten_8);
  mediump vec3 viewDir_10;
  viewDir_10 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_11;
  tmpvar_11.x = dot ((viewDir_10 - (2.0 * 
    (dot (tmpvar_1, viewDir_10) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_11.y = (1.0 - clamp (dot (tmpvar_1, viewDir_10), 0.0, 1.0));
  mediump vec2 tmpvar_12;
  tmpvar_12.x = ((tmpvar_11 * tmpvar_11) * (tmpvar_11 * tmpvar_11)).x;
  tmpvar_12.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (unity_NHxRoughness, tmpvar_12);
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_13.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_9) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_15;
  xlat_varoutput_15.xyz = tmpvar_14.xyz;
  xlat_varoutput_15.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
bool tb0;
highp vec4 t1;
mediump vec3 t16_2;
highp vec3 t3;
mediump vec3 t16_4;
highp float t15;
void main()
{
    //Instruction 3087
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3088
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3089
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3090
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3091
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3092
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3093
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3094
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3095
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3096
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3097
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3098
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3099
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3100
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3101
    //DP3
    t16_2.x = dot(t1.xyz, t1.xyz);
    //Instruction 3102
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3103
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * t16_2.xxx;
    //Instruction 3104
    //DP3
    t16_2.x = dot(t0.xyz, t0.xyz);
    //Instruction 3105
    //RSQ
    t16_2.x = inversesqrt(t16_2.x);
    //Instruction 3106
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xxx;
    //Instruction 3107
    //MOV
    vs_TEXCOORD2.w = t16_2.x;
    //Instruction 3108
    //MUL
    t0.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3109
    //MAD
    t0.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t0.xyz;
    //Instruction 3110
    //MAD
    t0.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t0.xyz;
    //Instruction 3111
    //DP3
    t15 = dot(t0.xyz, t0.xyz);
    //Instruction 3112
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3113
    //MUL
    t0.xyz = vec3(t15) * t0.xyz;
    //Instruction 3114
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 3115
    //MUL
    t1.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3116
    //MUL
    t1.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3117
    //MUL
    t1.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3118
    //MUL
    t3.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3119
    //MUL
    t3.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3120
    //MUL
    t3.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3121
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3122
    //MUL
    t3.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3123
    //MUL
    t3.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3124
    //MUL
    t3.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3125
    //ADD
    t1.xyz = t1.xyz + t3.xyz;
    //Instruction 3126
    //DP3
    t15 = dot(t1.xyz, t1.xyz);
    //Instruction 3127
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 3128
    //MUL
    t1.xyz = vec3(t15) * t1.xyz;
    //Instruction 3129
    //MUL
    t16_4.xyz = t0.yzx * t1.zxy;
    //Instruction 3130
    //MAD
    t16_4.xyz = t1.yzx * t0.zxy + (-t16_4.xyz);
    //Instruction 3131
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 3132
    //MUL
    vs_TEXCOORD3.xyz = t16_4.xyz * in_TANGENT0.www;
    //Instruction 3133
    //MOV
    vs_TEXCOORD3.w = t16_2.y;
    //Instruction 3134
    //MOV
    vs_TEXCOORD4.w = t16_2.z;
    //Instruction 3135
    //MOV
    t16_0.x = _LightMatrix0[0].x;
    //Instruction 3136
    //MOV
    t16_0.y = _LightMatrix0[1].x;
    //Instruction 3137
    //MOV
    t16_0.z = _LightMatrix0[2].x;
    //Instruction 3138
    //MOV
    t16_0.w = _LightMatrix0[3].x;
    //Instruction 3139
    //MUL
    t1 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3140
    //MAD
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    //Instruction 3141
    //MAD
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    //Instruction 3142
    //MAD
    t1 = _Object2World[3] * in_POSITION0.wwww + t1;
    //Instruction 3143
    //DP4
    vs_TEXCOORD5.x = dot(t16_0, t1);
    //Instruction 3144
    //MOV
    t16_0.x = _LightMatrix0[0].y;
    //Instruction 3145
    //MOV
    t16_0.y = _LightMatrix0[1].y;
    //Instruction 3146
    //MOV
    t16_0.z = _LightMatrix0[2].y;
    //Instruction 3147
    //MOV
    t16_0.w = _LightMatrix0[3].y;
    //Instruction 3148
    //DP4
    vs_TEXCOORD5.y = dot(t16_0, t1);
    //Instruction 3149
    //MOV
    t16_0.x = _LightMatrix0[0].z;
    //Instruction 3150
    //MOV
    t16_0.y = _LightMatrix0[1].z;
    //Instruction 3151
    //MOV
    t16_0.z = _LightMatrix0[2].z;
    //Instruction 3152
    //MOV
    t16_0.w = _LightMatrix0[3].z;
    //Instruction 3153
    //DP4
    vs_TEXCOORD5.z = dot(t16_0, t1);
    //Instruction 3154
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
uniform lowp sampler2D unity_NHxRoughness;
in highp vec4 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out mediump vec4 SV_Target0;
highp float t0;
mediump float t16_0;
lowp float t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump vec4 t16_3;
lowp vec4 t10_3;
mediump vec3 t16_4;
lowp float t10_5;
mediump vec3 t16_7;
mediump float t16_16;
void main()
{
    //Instruction 3055
    //DP3
    t0 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    //Instruction 3056
    //SAMPLE
    t10_0 = texture(_LightTextureB0, vec2(t0)).w;
    //Instruction 3057
    //SAMPLE
    t10_5 = texture(_LightTexture0, vs_TEXCOORD5.xyz).w;
    //Instruction 3058
    //MUL
    t16_0 = t10_5 * t10_0;
    //Instruction 3059
    //MUL
    t16_1.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 3060
    //DP3
    t16_16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    //Instruction 3061
    //RSQ
    t16_16 = inversesqrt(t16_16);
    //Instruction 3062
    //MUL
    t16_2.xyz = vec3(t16_16) * vs_TEXCOORD4.xyz;
    //Instruction 3063
    //DP3
    t16_16 = dot((-vs_TEXCOORD1.xyz), t16_2.xyz);
    //Instruction 3064
    //ADD
    t16_16 = t16_16 + t16_16;
    //Instruction 3065
    //MAD
    t16_3.xyz = t16_2.xyz * (-vec3(t16_16)) + (-vs_TEXCOORD1.xyz);
    //Instruction 3066
    //MOV
    t16_4.x = vs_TEXCOORD2.w;
    //Instruction 3067
    //MOV
    t16_4.y = vs_TEXCOORD3.w;
    //Instruction 3068
    //MOV
    t16_4.z = vs_TEXCOORD4.w;
    //Instruction 3069
    //DP3
    t16_16 = dot(t16_3.xyz, t16_4.xyz);
    //Instruction 3070
    //DP3
    t16_2.x = dot(t16_2.xyz, t16_4.xyz);
    t16_2.x = clamp(t16_2.x, 0.0, 1.0);
    //Instruction 3071
    //MUL
    t16_16 = t16_16 * t16_16;
    //Instruction 3072
    //MUL
    t16_3.x = t16_16 * t16_16;
    //Instruction 3073
    //ADD
    t16_3.y = (-_Glossiness) + 1.0;
    //Instruction 3074
    //SAMPLE
    t10_0 = texture(unity_NHxRoughness, t16_3.xy).w;
    //Instruction 3075
    //MUL
    t16_0 = t10_0 * 16.000000;
    //Instruction 3076
    //SAMPLE
    t10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
    //Instruction 3077
    //MAD
    t16_7.xyz = t10_3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    //Instruction 3078
    //MUL
    t16_3 = t10_3.wxyz * _Color.wxyz;
    //Instruction 3079
    //MAD
    t16_7.xyz = vec3(_Metallic) * t16_7.xyz + unity_ColorSpaceDielectricSpec.xyz;
    //Instruction 3080
    //MUL
    t16_7.xyz = vec3(t16_0) * t16_7.xyz;
    //Instruction 3081
    //MAD
    t16_16 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    //Instruction 3082
    //MAD
    t16_7.xyz = t16_3.yzw * vec3(t16_16) + t16_7.xyz;
    //Instruction 3083
    //MOV
    SV_Target0.w = t16_3.x;
    //Instruction 3084
    //MUL
    t16_1.xyz = t16_1.xyz * t16_7.xyz;
    //Instruction 3085
    //MUL
    SV_Target0.xyz = t16_2.xxx * t16_1.xyz;
    //Instruction 3086
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _DetailAlbedoMap_ST;
uniform mediump float _UVSec;
uniform mediump mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = _glesNormal;
  highp vec2 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0.xy;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1.xy;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp mat3 tangentToWorld_5;
  highp vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  tmpvar_6 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 texcoord_11;
  texcoord_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  highp vec2 tmpvar_12;
  if ((_UVSec == 0.0)) {
    tmpvar_12 = tmpvar_2;
  } else {
    tmpvar_12 = tmpvar_3;
  };
  texcoord_11.zw = ((tmpvar_12 * _DetailAlbedoMap_ST.xy) + _DetailAlbedoMap_ST.zw);
  mediump vec3 n_13;
  n_13 = (tmpvar_10.xyz - _WorldSpaceCameraPos);
  highp vec3 norm_14;
  norm_14 = tmpvar_1;
  highp vec4 v_15;
  v_15.x = _World2Object[0].x;
  v_15.y = _World2Object[1].x;
  v_15.z = _World2Object[2].x;
  v_15.w = _World2Object[3].x;
  highp vec4 v_16;
  v_16.x = _World2Object[0].y;
  v_16.y = _World2Object[1].y;
  v_16.z = _World2Object[2].y;
  v_16.w = _World2Object[3].y;
  highp vec4 v_17;
  v_17.x = _World2Object[0].z;
  v_17.y = _World2Object[1].z;
  v_17.z = _World2Object[2].z;
  v_17.w = _World2Object[3].z;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(((
    (v_15.xyz * norm_14.x)
   + 
    (v_16.xyz * norm_14.y)
  ) + (v_17.xyz * norm_14.z)));
  highp vec3 dir_19;
  dir_19 = tmpvar_4.xyz;
  highp mat3 tmpvar_20;
  tmpvar_20[0] = _Object2World[0].xyz;
  tmpvar_20[1] = _Object2World[1].xyz;
  tmpvar_20[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_21;
  tmpvar_21.xyz = normalize((tmpvar_20 * dir_19));
  tmpvar_21.w = tmpvar_4.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21.www;
  mediump vec3 normal_23;
  normal_23 = tmpvar_18;
  mediump vec3 tangent_24;
  tangent_24 = tmpvar_21.xyz;
  mediump vec3 flip_25;
  flip_25 = tmpvar_22;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (((normal_23.yzx * tangent_24.zxy) - (normal_23.zxy * tangent_24.yzx)) * flip_25);
  mediump mat3 tmpvar_27;
  tmpvar_27[0].x = tangent_24.x;
  tmpvar_27[0].y = tmpvar_26.x;
  tmpvar_27[0].z = normal_23.x;
  tmpvar_27[1].x = tangent_24.y;
  tmpvar_27[1].y = tmpvar_26.y;
  tmpvar_27[1].z = normal_23.y;
  tmpvar_27[2].x = tangent_24.z;
  tmpvar_27[2].y = tmpvar_26.z;
  tmpvar_27[2].z = normal_23.z;
  tangentToWorld_5 = tmpvar_27;
  highp vec3 v_28;
  v_28.x = tangentToWorld_5[0].x;
  v_28.y = tangentToWorld_5[1].x;
  v_28.z = tangentToWorld_5[2].x;
  tmpvar_7.xyz = v_28;
  highp vec3 v_29;
  v_29.x = tangentToWorld_5[0].y;
  v_29.y = tangentToWorld_5[1].y;
  v_29.z = tangentToWorld_5[2].y;
  tmpvar_8.xyz = v_29;
  highp vec3 v_30;
  v_30.x = tangentToWorld_5[0].z;
  v_30.y = tangentToWorld_5[1].z;
  v_30.z = tangentToWorld_5[2].z;
  tmpvar_9.xyz = v_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_WorldSpaceLightPos0.xyz - (tmpvar_10.xyz * _WorldSpaceLightPos0.w));
  tmpvar_7.w = tmpvar_31.x;
  tmpvar_8.w = tmpvar_31.y;
  tmpvar_9.w = tmpvar_31.z;
  gl_Position = tmpvar_6;
  xlv_TEXCOORD0 = texcoord_11;
  xlv_TEXCOORD1 = normalize(n_13);
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD2_1 = tmpvar_8;
  xlv_TEXCOORD2_2 = tmpvar_9;
  xlv_TEXCOORD5 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 unity_ColorSpaceDielectricSpec;
uniform lowp vec4 _LightColor0;
uniform sampler2D unity_NHxRoughness;
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
uniform mediump float _Metallic;
uniform mediump float _Glossiness;
uniform sampler2D _LightTexture0;
varying highp vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD2_1;
varying mediump vec4 xlv_TEXCOORD2_2;
varying highp vec2 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  tmpvar_1 = normalize(xlv_TEXCOORD2_2.xyz);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  mediump vec3 tmpvar_3;
  tmpvar_3 = (_Color.xyz * tmpvar_2.xyz);
  mediump vec3 tmpvar_4;
  tmpvar_4.x = xlv_TEXCOORD2.w;
  tmpvar_4.y = xlv_TEXCOORD2_1.w;
  tmpvar_4.z = xlv_TEXCOORD2_2.w;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, xlv_TEXCOORD5);
  mediump float atten_6;
  atten_6 = tmpvar_5.w;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _LightColor0.xyz;
  tmpvar_7 = (tmpvar_7 * atten_6);
  mediump vec3 viewDir_8;
  viewDir_8 = -(xlv_TEXCOORD1);
  mediump vec2 tmpvar_9;
  tmpvar_9.x = dot ((viewDir_8 - (2.0 * 
    (dot (tmpvar_1, viewDir_8) * tmpvar_1)
  )), tmpvar_4);
  tmpvar_9.y = (1.0 - clamp (dot (tmpvar_1, viewDir_8), 0.0, 1.0));
  mediump vec2 tmpvar_10;
  tmpvar_10.x = ((tmpvar_9 * tmpvar_9) * (tmpvar_9 * tmpvar_9)).x;
  tmpvar_10.y = (1.0 - _Glossiness);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (unity_NHxRoughness, tmpvar_10);
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = (((
    (tmpvar_3 * (unity_ColorSpaceDielectricSpec.w - (_Metallic * unity_ColorSpaceDielectricSpec.w)))
   + 
    ((tmpvar_11.w * 16.0) * mix (unity_ColorSpaceDielectricSpec.xyz, tmpvar_3, vec3(_Metallic)))
  ) * tmpvar_7) * clamp (dot (tmpvar_1, tmpvar_4), 0.0, 1.0));
  mediump vec4 xlat_varoutput_13;
  xlat_varoutput_13.xyz = tmpvar_12.xyz;
  xlat_varoutput_13.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = xlat_varoutput_13;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "_ALPHABLEND_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Cutoff;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	mediump float _BumpScale;
uniform 	mediump float _DetailNormalMapScale;
uniform 	mediump float _Metallic;
uniform 	mediump float _Glossiness;
uniform 	mediump float _OcclusionStrength;
uniform 	mediump float _Parallax;
uniform 	mediump float _UVSec;
uniform 	mediump vec4 _EmissionColor;
uniform 	mediump mat4 _LightMatrix0;
in highp vec4 in_POSITION0;
in mediump vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec2 in_TEXCOORD1;
in mediump vec4 in_TANGENT0;
out highp vec4 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out highp vec2 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
mediump vec3 t16_5;
void main()
{
    //Instruction 3867
    //MUL
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    //Instruction 3868
    //MAD
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    //Instruction 3869
    //MAD
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    //Instruction 3870
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 3871
    //EQ
    tb0 = _UVSec==0.0;
    //Instruction 3872
    //MOVC
    t0.xy = (bool(tb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    //Instruction 3873
    //MAD
    vs_TEXCOORD0.zw = t0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    //Instruction 3874
    //MAD
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    //Instruction 3875
    //MUL
    t0.xyz = in_POSITION0.yyy * _Object2World[1].xyz;
    //Instruction 3876
    //MAD
    t0.xyz = _Object2World[0].xyz * in_POSITION0.xxx + t0.xyz;
    //Instruction 3877
    //MAD
    t0.xyz = _Object2World[2].xyz * in_POSITION0.zzz + t0.xyz;
    //Instruction 3878
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 3879
    //ADD
    t1.xyz = t0.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    //Instruction 3880
    //MAD
    t0.xyz = (-t0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 3881
    //DP3
    t16_2 = dot(t1.xyz, t1.xyz);
    //Instruction 3882
    //RSQ
    t16_2 = inversesqrt(t16_2);
    //Instruction 3883
    //MUL
    vs_TEXCOORD1.xyz = t1.xyz * vec3(t16_2);
    //Instruction 3884
    //MOV
    t1.w = t0.x;
    //Instruction 3885
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].xyz;
    //Instruction 3886
    //MAD
    t3.xyz = _Object2World[0].xyz * in_TANGENT0.xxx + t3.xyz;
    //Instruction 3887
    //MAD
    t3.xyz = _Object2World[2].xyz * in_TANGENT0.zzz + t3.xyz;
    //Instruction 3888
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3889
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3890
    //MUL
    t1.xyz = t0.xxx * t3.xyz;
    //Instruction 3891
    //MOV
    vs_TEXCOORD2 = t1;
    //Instruction 3892
    //MUL
    t3.x = in_NORMAL0.x * _World2Object[0].x;
    //Instruction 3893
    //MUL
    t3.y = in_NORMAL0.x * _World2Object[1].x;
    //Instruction 3894
    //MUL
    t3.z = in_NORMAL0.x * _World2Object[2].x;
    //Instruction 3895
    //MUL
    t4.x = in_NORMAL0.y * _World2Object[0].y;
    //Instruction 3896
    //MUL
    t4.y = in_NORMAL0.y * _World2Object[1].y;
    //Instruction 3897
    //MUL
    t4.z = in_NORMAL0.y * _World2Object[2].y;
    //Instruction 3898
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3899
    //MUL
    t4.x = in_NORMAL0.z * _World2Object[0].z;
    //Instruction 3900
    //MUL
    t4.y = in_NORMAL0.z * _World2Object[1].z;
    //Instruction 3901
    //MUL
    t4.z = in_NORMAL0.z * _World2Object[2].z;
    //Instruction 3902
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 3903
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 3904
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 3905
    //MUL
    t2.xyz = t0.xxx * t3.xyz;
    //Instruction 3906
    //MUL
    t16_5.xyz = t1.yzx * t2.zxy;
    //Instruction 3907
    //MAD
    t16_5.xyz = t2.yzx * t1.zxy + (-t16_5.xyz);
    //Instruction 3908
    //MUL
    vs_TEXCOORD3.xyz = t16_5.xyz * in_TANGENT0.www;
    //Instruction 3909
    //MOV
    vs_TEXCOORD3.w = t0.y;
    //Instruction 3910
    //MOV
    t2.w = t0.z;
    //Instruction 3911
    //MOV
    vs_TEXCOORD4 = t2;
    //Instruction 3912
    //MUL
    t0 = in_POSITION0.yyyy * _Object2World[1];
    //Instruction 3913
    //MAD
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    //Instruction 3914
    //MAD
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    //Instruction 3915
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 3916
    //MOV
    t16_1.x = _LightMatrix0[0].x;
 